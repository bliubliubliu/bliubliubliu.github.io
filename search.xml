<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL基础学习笔记</title>
    <url>/2020/08/29/MySQL%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="MySQL基础学习笔记"><a href="#MySQL基础学习笔记" class="headerlink" title="MySQL基础学习笔记"></a>MySQL基础学习笔记</h2><h4 id="了解相关概念："><a href="#了解相关概念：" class="headerlink" title="了解相关概念："></a>了解相关概念：</h4><p>数据库作用：数据持久化，结构化查询，便于管理</p>
<p>DB:数据仓库;    </p>
<p>DBMS：数据库管理系统，MySQL，Oracle，DB2，SqlServer；</p>
<p>SQL:    结构化查询语言，用于与数据库通信的语言，是几乎所有主流数据库软件的通用语言。</p>
<h4 id="数据库特点"><a href="#数据库特点" class="headerlink" title="数据库特点:"></a>数据库特点:</h4><p>1.将数据放到表中，把表放到库中</p>
<p>2.表类似于类，有自己的属性，各列（字段）就相当于属性</p>
<h4 id="DBMS分两类"><a href="#DBMS分两类" class="headerlink" title="DBMS分两类:"></a>DBMS分两类:</h4><p>1，基于共享文件系统的（Access）</p>
<p>2.基于客户机——服务器的（MySQL、Oracle、SqlServer）</p>
<p>安装数据库一般指的是服务端安装</p>
<h4 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h4><p><a href="https://www.bilibili.com/video/BV12b411K7Zu?p=7" target="_blank" rel="noopener">https://www.bilibili.com/video/BV12b411K7Zu?p=7</a></p>
<p>https:#<a href="http://www.bilibili.com/video/BV12b411K7Zu?p=8" target="_blank" rel="noopener">www.bilibili.com/video/BV12b411K7Zu?p=8</a></p>
<p>https:#<a href="http://www.bilibili.com/video/BV12b411K7Zu?p=9" target="_blank" rel="noopener">www.bilibili.com/video/BV12b411K7Zu?p=9</a></p>
<p>https:#<a href="http://www.bilibili.com/video/BV12b411K7Zu?p=10" target="_blank" rel="noopener">www.bilibili.com/video/BV12b411K7Zu?p=10</a></p>
<p>配置文件my.ini</p>
<h4 id="MySQL服务的启动-停止CMD命令："><a href="#MySQL服务的启动-停止CMD命令：" class="headerlink" title="MySQL服务的启动/停止CMD命令："></a>MySQL服务的启动/停止CMD命令：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">net start&#x2F;stop MySQL2020</span><br></pre></td></tr></table></figure>

<p>ps:CMD要以管理员模式启动</p>
<h4 id="MySQL服务端的登陆与退出："><a href="#MySQL服务端的登陆与退出：" class="headerlink" title="MySQL服务端的登陆与退出："></a>MySQL服务端的登陆与退出：</h4><p>1.使用自带命令行客户端，只适合root用户(密码：1234)</p>
<p>2.用CMD命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -P 3306 -u root -p</span><br><span class="line">或者如果是用本机的话可以省略-h主机名和-P端口号:</span><br><span class="line">mysql -u root -p</span><br><span class="line">退出用命令exit或按Ctrl+C</span><br></pre></td></tr></table></figure>

<p>ps:1.登录前要启动MySQL服务；2.CMD中按方向键上下键可以切换历史命令，用用命令exit或按Ctrl+C可以退出。</p>
<hr>
<h4 id="MySQL常用命令："><a href="#MySQL常用命令：" class="headerlink" title="MySQL常用命令："></a>MySQL常用命令：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql&gt;</span><br><span class="line">show databases;#显示已有哪些数据库</span><br><span class="line">use test;#进入（打开）库test</span><br><span class="line">show tables;#显示当前打开的库有哪些表</span><br><span class="line">show tables from mysql;#再没有打开（进入）mysql库时直接显示它的表</span><br><span class="line">						#但此时并没有打开（进入）mysql库</span><br><span class="line">select database();#调用函数database()查看当前所在库（打开的库）</span><br><span class="line">create table stuinfo(</span><br><span class="line">    id int,</span><br><span class="line">    name varchar(20)</span><br><span class="line">    ...</span><br><span class="line">);</span><br><span class="line">    #为当前所在库创建新的表，包含id,name两列，类型分别是整型和字符串</span><br><span class="line">desc stuinfo;#查看表stuinfo的结构，含有哪些列</span><br><span class="line">select * from stuinfo;#查看表stuinfo内的数据</span><br><span class="line">insert into stuinfo (id,name) values(1,&#39;john&#39;);#给表stuinfo插入新数据</span><br><span class="line">update stuinfo set name&#x3D;&#39;lilei&#39; where id&#x3D;1;#修改(更新)表stuinfo中id&#x3D;1的数据项的name属性为&#39;lilei&#39;</span><br><span class="line">delete from stuinfo where id&#x3D;1;#删除表stuinfo中id&#x3D;1的数据项</span><br><span class="line">select version();#查看MySQL版本</span><br><span class="line">DROP DATABASE 库名;#删除库</span><br></pre></td></tr></table></figure>

<p>ps:每条命令用;或者\g结尾;在CMD不登陆服务端直接查看MySQL版本号的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql -V</span><br></pre></td></tr></table></figure>

<h4 id="MySQL语法规范："><a href="#MySQL语法规范：" class="headerlink" title="MySQL语法规范："></a>MySQL语法规范：</h4><p>1.不区分大小写，但建议关键字大写，表名、列名小写；</p>
<p>2.每条命令最好用分号结尾；</p>
<p>3.在输入命令时可以根据需要缩进或回车换行，建议关键字单独一行；</p>
<p>4.注释：</p>
<p>​            单行注释：#注释文字</p>
<p>​            单行注释：– 注释文字</p>
<p>​            多行注释：/* 注释文字 */</p>
<hr>
<h4 id="SQL语言又分为DQL，DML，DDL，TCL"><a href="#SQL语言又分为DQL，DML，DDL，TCL" class="headerlink" title="SQL语言又分为DQL，DML，DDL，TCL"></a>SQL语言又分为DQL，DML，DDL，TCL</h4><h5 id="DQL语言（数据查询语言）学习"><a href="#DQL语言（数据查询语言）学习" class="headerlink" title="DQL语言（数据查询语言）学习"></a>DQL语言（数据查询语言）学习</h5><h6 id="1-基础查询："><a href="#1-基础查询：" class="headerlink" title="1.基础查询："></a>1.基础查询：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">select 查询列表 from 表名;</span><br><span class="line">&#x2F;*</span><br><span class="line">1.查询列表可以是：表中的字段、常量值、表达式、函数</span><br><span class="line">2.查询的结果是一个虚拟的表格</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#查询表中单个字段</span><br><span class="line">select last_name from employees;</span><br><span class="line"></span><br><span class="line">#查询表中多个字段</span><br><span class="line">select last_name,salary,email from employees;</span><br><span class="line"></span><br><span class="line">#查询表中所有字段</span><br><span class="line">select * from employees;</span><br><span class="line">#ps:&#96;NAME&#96;表示NAME是字段而不是关键字</span><br><span class="line"></span><br><span class="line">#查询常量值</span><br><span class="line">#字符型和日期型的常量值必须用单引号引起来，数值型不需要</span><br><span class="line">select 100;</span><br><span class="line">select &#39;john&#39;</span><br><span class="line">#ps:MySQL不区分字符串和字符，都用单引号表示；</span><br><span class="line"># 用双引号表示字符串也可以，但mysql 里面有个sql mode叫做：ANSI_QUOTES 。这个ANSI_QUOTES开启后会把双引号当作 &#96;&#96;。所以我们还是建议使用单引号来引用字符串。</span><br><span class="line"></span><br><span class="line">#查询表达式</span><br><span class="line">select 100%98;</span><br><span class="line"></span><br><span class="line">#查询函数</span><br><span class="line">#要求函数必须有返回值</span><br><span class="line">select version();</span><br><span class="line"></span><br><span class="line">#为方便理解，给字段起别名</span><br><span class="line">#法1：用as</span><br><span class="line">select 100%98 as 别名;</span><br><span class="line">select last_name as 姓,first_name as &#39;名&#39; from employees;</span><br><span class="line">#法2：用空格</span><br><span class="line">select last_name 姓 from employees;</span><br><span class="line">#ps:别名加不加双引号均可，如果含有特殊符号(如空格)或关键字，应加上双引号（或单引号或者着重号&#96;都可以）</span><br><span class="line">#ps:跟别名不同，为了跟关键字区分，已有的字段只能加着重号&#96;引起来。</span><br><span class="line"></span><br><span class="line">#去重</span><br><span class="line">#只能针对一个字段去重</span><br><span class="line">select distinct department_id from employees;</span><br><span class="line"></span><br><span class="line">#+的作用：算术运算符</span><br><span class="line">&#x2F;*</span><br><span class="line">java中的+号：</span><br><span class="line">①运算符，两个操作数都为数值型</span><br><span class="line">②连接符，只要有一个操作数为字符串</span><br><span class="line"></span><br><span class="line">mysgl中的+号：仅仅只有一个功能：运算符</span><br><span class="line">select 100+90；两个操作数都为数值型，则做加法运算</span><br><span class="line">select&#39;123&#39;+90；只要其中一方为字符型，试图将字符型数值转换成数值型</span><br><span class="line">				如果转换成功，则继续做加法运算</span><br><span class="line">select john&#39;+90；如果转换失败，则将字符型数值转换成0</span><br><span class="line"></span><br><span class="line">select null+10；只要其中一方为null，则结果肯定为null</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#拼接字段生成新字段，用函数concat()</span><br><span class="line">select concat(a,&#39;b&#39;,&#39;c&#39;) as 拼接后的字段名;</span><br><span class="line">select concat(first_name,last_name) as 姓名 from employees;</span><br><span class="line">#ps:被拼接的字段中，只要其中有一方为null，则结果肯定为null，为了解决这个问题，可以调用函数ifnull(字段名，替换值)，如：</span><br><span class="line">#函数ifnull(字段名，替换值)</span><br><span class="line">select ifnull(commission_pct, 0) as 奖金率 from employees;</span><br><span class="line">SELECT </span><br><span class="line">CONCAT(&#96;first_name&#96;,&#39;,&#39;,&#96;last_name&#96;,&#39;,&#39;,IFNULL(&#96;commission_pct&#96;,0)) AS out_put</span><br><span class="line">FROM </span><br><span class="line">	&#96;employees&#96;;</span><br><span class="line">#函数isnull(字段名)，根据值是否为null返回1或0</span><br><span class="line">SELECT </span><br><span class="line">	ISNULL(&#96;commission_pct&#96;)</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;;</span><br><span class="line">#ps:字段名、表名等加不加着重号&#96;都可以，如果与关键字重复的话，一定要加。</span><br></pre></td></tr></table></figure>

<h6 id="2-条件查询："><a href="#2-条件查询：" class="headerlink" title="2.条件查询："></a>2.条件查询：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法：</span><br><span class="line">select </span><br><span class="line">	查询列表</span><br><span class="line">from</span><br><span class="line">	表名</span><br><span class="line">where</span><br><span class="line">	筛选条件;</span><br><span class="line">#ps:执行顺序：from表-&gt;where筛选-&gt;select</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">分类：</span><br><span class="line">	1.按条件表达式筛选（关系运算符：&gt; &lt; &#x3D; !&#x3D;或&lt;&gt; &gt;&#x3D; &lt;&#x3D;）</span><br><span class="line">	2.按逻辑表达式筛选（逻辑运算符:&amp;&amp; || ! 或 and or not）</span><br><span class="line">	3.模糊查询（like,between and,in,is null）</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#按条件表达式筛选</span><br><span class="line">select * from employees where salary&gt;12000;</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;department_id&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;department_id&#96;!&#x3D;90;</span><br><span class="line">	</span><br><span class="line">#按逻辑表达式筛选</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;salary&#96;,</span><br><span class="line">	&#96;commission_pct&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;salary&#96;&gt;&#x3D;10000 AND &#96;salary&#96;&lt;20000;</span><br><span class="line">	</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;department_id&#96;&lt;90 </span><br><span class="line">OR </span><br><span class="line">	&#96;department_id&#96;&gt;110 </span><br><span class="line">OR</span><br><span class="line">	&#96;salary&#96;&gt;15000;</span><br><span class="line">	</span><br><span class="line">#模糊查询</span><br><span class="line">#like（not like）</span><br><span class="line">&#x2F;*</span><br><span class="line">特点：</span><br><span class="line">1.一般和通配符搭配使用：</span><br><span class="line">		通配符% 表示任意多个字符，包括0个字符</span><br><span class="line">		通配符_ 表示任意单个字符</span><br><span class="line">2.不仅适用于字符型字段，还适用于数值型（可能涉及类型转换，数值转字符）</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例1：查询员工名中包含字符a的员工信息</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;last_name&#96; LIKE &#39;%a%&#39;;</span><br><span class="line">#案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</span><br><span class="line">SELECT</span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;salary&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;last_name&#96; LIKE &#39;__n_l%&#39;;</span><br><span class="line">#案例3：查询员工名中第二个字符为_的员工名</span><br><span class="line">SELECT</span><br><span class="line">	&#96;last_name&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;last_name&#96; LIKE &#39;_\_%&#39;;</span><br><span class="line">#ps:通过默认转义字符\表示特殊字符，也可以用escape指定转义字符，如：</span><br><span class="line">SELECT</span><br><span class="line">	&#96;last_name&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;last_name&#96; LIKE &#39;_$_%&#39; ESCAPE &#39;$&#39;;</span><br><span class="line">	</span><br><span class="line">#between and（not between and）</span><br><span class="line">&#x2F;*</span><br><span class="line">1.等价于&gt;&#x3D; min and &lt;&#x3D; max,但使用between and可以提高语句的简洁度</span><br><span class="line">2.包含临界值</span><br><span class="line">3.两个临界值不能颠倒，小的在前，大的在后，不然结果为空</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例1：查询员工编号在100到120之间的员工信息</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;employee_id&#96; BETWEEN 100 AND 120;</span><br><span class="line">	</span><br><span class="line">#in（not in）</span><br><span class="line">&#x2F;*</span><br><span class="line">含义：判断某字段的值是否属于in列表中的某一项，等效于&#x3D;a or &#x3D;b or &#x3D;c</span><br><span class="line">特点：</span><br><span class="line">	1.使用in提高语句简洁度</span><br><span class="line">	2.in列表的值类型必须与字段值类型一致或兼容</span><br><span class="line">	3.in列表内不支持通配符</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例：查询员工的工种编号是AD_PRES，AD-VP，PU_CLERK中的一个员工名和工种编号</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;job_id&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;job_id&#96; IN (&#39;AD_PRES&#39;,&#39;AD_VP&#39;,&#39;PU_CLERK&#39;);</span><br><span class="line">	</span><br><span class="line">#is null（is not null）</span><br><span class="line">#用于判断null值，&#x3D;和!&#x3D;不能判断null值</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;commission_pct&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE </span><br><span class="line">	&#96;commission_pct&#96; IS NULL;</span><br><span class="line">	</span><br><span class="line">#安全等于 &lt;&#x3D;&gt;</span><br><span class="line">#可以判断是否等于null值</span><br><span class="line">&#x2F;*</span><br><span class="line">IS NULL	：仅仅可以判断NULL值，可读性较高</span><br><span class="line">&lt;&#x3D;&gt;		：既可以判断NULL值，又可以判断普通的数值，但可读性差</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	&#96;commission_pct&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE </span><br><span class="line">	NOT(&#96;commission_pct&#96; &lt;&#x3D;&gt; NULL);</span><br><span class="line">	</span><br><span class="line">#面试题：下面两次查询是否等效？</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;;</span><br><span class="line">SELECT </span><br><span class="line">	*</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;commission_pct&#96; LIKE &#39;%%&#39; AND &#96;last_name&#96; LIKE &#39;%%&#39;;</span><br><span class="line">#不等效，只要&#96;commission_pct&#96;值存在null，对应数据项就会被剔除，把and改成or就等效。</span><br></pre></td></tr></table></figure>

<h6 id="3-排序查询："><a href="#3-排序查询：" class="headerlink" title="3.排序查询："></a>3.排序查询：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法：</span><br><span class="line">select 查询列表</span><br><span class="line">from 表名</span><br><span class="line">【where 筛选条件】</span><br><span class="line">order by 排序列表 【升|降：asc|desc】</span><br><span class="line">#ps:执行顺序：from表-&gt;where筛选-&gt;select-&gt;order by排序</span><br><span class="line">&#x2F;*</span><br><span class="line">特点：</span><br><span class="line">	1.升|降：asc|desc，省略关键字默认是asc升序</span><br><span class="line">	2.order by子句中可以支持单个字段、多个字段、表达式、函数、别名</span><br><span class="line">	3.order by子句一般放在查询语句的最后面，limit子句除外</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例1：一般排序</span><br><span class="line">SELECT *</span><br><span class="line">FROM &#96;employees&#96;</span><br><span class="line">ORDER BY &#96;salary&#96; DESC;</span><br><span class="line"></span><br><span class="line">#案例2：带筛选条件的排序</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">WHERE</span><br><span class="line">	&#96;department_id&#96;&gt;&#x3D;90</span><br><span class="line">ORDER BY &#96;hiredate&#96; ASC;</span><br><span class="line"></span><br><span class="line">#案例3：按表达式排序</span><br><span class="line">SELECT </span><br><span class="line">	*,</span><br><span class="line">	&#96;salary&#96;*12*(1+IFNULL(&#96;commission_pct&#96;,0)) AS 年薪</span><br><span class="line">FROM &#96;employees&#96;</span><br><span class="line">ORDER BY &#96;salary&#96;*12*(1+IFNULL(&#96;commission_pct&#96;,0)) DESC;</span><br><span class="line"></span><br><span class="line">#案例3：按别名排序</span><br><span class="line">SELECT </span><br><span class="line">	*,</span><br><span class="line">	&#96;salary&#96;*12*(1+IFNULL(&#96;commission_pct&#96;,0)) AS 年薪</span><br><span class="line">FROM &#96;employees&#96;</span><br><span class="line">ORDER BY 年薪 DESC;</span><br><span class="line"></span><br><span class="line">#案例5：按函数返回值排序，按姓名的长度显示员工的姓名和工资</span><br><span class="line">SELECT </span><br><span class="line">	LENGTH(&#96;last_name&#96;) AS 字节长度,</span><br><span class="line">	&#96;last_name&#96;</span><br><span class="line">FROM</span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">ORDER BY LENGTH(&#96;last_name&#96;) DESC;</span><br><span class="line"></span><br><span class="line">#案例6：按多个字段排序，查询员工信息，要求先按工资升排序，再按员工编号降排序</span><br><span class="line">SELECT</span><br><span class="line">	*</span><br><span class="line">FROM </span><br><span class="line">	&#96;employees&#96;</span><br><span class="line">ORDER BY &#96;salary&#96; ASC,&#96;employee_id&#96; DESC;</span><br></pre></td></tr></table></figure>

<h6 id="4-常见函数："><a href="#4-常见函数：" class="headerlink" title="4.常见函数："></a>4.常见函数：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">概念：类似面向对象语言的方法，将一组逻辑语句封装在方法体中，对外暴露方法名</span><br><span class="line">好处：隐藏实现细节，提高代码重用性</span><br><span class="line">调用：select 函数名（实参列表）【from 表名】</span><br><span class="line">关注点：</span><br><span class="line">	1.函数名</span><br><span class="line">	2.函数功能</span><br><span class="line">分类：</span><br><span class="line">	1.单行函数:</span><br><span class="line">		输入一个值，返回一个值，如concat,length,ifnull</span><br><span class="line">	2.分组函数:</span><br><span class="line">		输入一组值，返回一个值，做统计计算，又称为统计函数、聚合函			数、组函数。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<p><strong>单行函数</strong></p>
<p>包括<br>字符函数：length,concat,substr,instr,trim,upper,lower,lpad,rpad,replace<br>数学函数:round,ceil,floor,truncate,mod,rand<br>日期函数:<br>now,curdate,curtime,year,month,monthname,day,hour,minute,second,str_to_date,date_format，datediff<br>其他函数【补充】:version(),database(),user(),password(‘字符串’)加密，md5(‘字符串’)md5加密<br>流程控制函数【补充】:if,case</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#字符函数</span><br><span class="line"></span><br><span class="line">#length() 获取参数值的字节长度</span><br><span class="line">SELECT LENGTH(&#39;john&#39;);</span><br><span class="line">SELECT LENGTH(&#39;蛤蛤蛤&#39;);</span><br><span class="line">#ps:查看所用字符集的命令：</span><br><span class="line">SHOW VARIABLES LIKE &#39;%char%&#39;;</span><br><span class="line"></span><br><span class="line">#concat() 拼接字符串</span><br><span class="line">SELECT </span><br><span class="line">	CONCAT(&#96;last_name&#96;,&#39;_&#39;,&#96;first_name&#96;) AS &#96;姓名&#96;</span><br><span class="line">FROM &#96;employees&#96;;</span><br><span class="line"></span><br><span class="line">#upper(),lower() 字符大写化、小写化</span><br><span class="line"></span><br><span class="line">#substr()或者substring() 截取子字符串</span><br><span class="line">#ps:索引从1开始</span><br><span class="line">#截取从指定索引处后面的所有字符</span><br><span class="line">SELECT SUBSTR(&#39;李莫愁爱上了陆展元&#39;,7)out_put;</span><br><span class="line">#截取从指定索引处指定字符长度的字符</span><br><span class="line">SELECT SUBSTR（&#39;李莫愁爱上了陆展元&#39;,1，3）output;</span><br><span class="line"></span><br><span class="line">#instr() 返回子串第一次出现的索引，如果找不到返回。</span><br><span class="line">SELECT INSTR(&#39;你干啥去&#39;,&#39;啥&#39;) AS out_put; #返回3</span><br><span class="line"></span><br><span class="line">#trim() 剪去前后指定字符，默认剪去空格</span><br><span class="line">SELECT LENGTHTRIM(&#39;   谁在那   &#39;)) AS out_put; #输出9</span><br><span class="line">SELECT TRIM(&#39;a&#39; FROM &#39;aaaaaa吃aa了aaaa吗aaaa&#39;) AS out_put;</span><br><span class="line">								#输出&#39;吃aa了aaaa吗&#39;</span><br><span class="line"></span><br><span class="line">#lpad() 用指定的字符在左边填充到指定字符长度，若指定长度小于原字符串长度，从右边截去多余字符</span><br><span class="line">SELECT LPAD(&#39;大马猴&#39;,5,&#39;#&#39;) AS out_put;#输出‘##大马猴’</span><br><span class="line">SELECT LPAD(&#39;大马猴&#39;,2,&#39;#&#39;) AS out_put;#输出‘大马’</span><br><span class="line"></span><br><span class="line">#rpad() 用指定的字符在右边填充到指定字符长度,若指定长度小于原字符串长度，还是从右边截去多余字符</span><br><span class="line">SELECT RPAD(&#39;大马猴&#39;,10,&#39;#%&#39;) AS out_put;</span><br><span class="line">SELECT RPAD(&#39;大马猴&#39;,2,&#39;#%&#39;) AS out_put;</span><br><span class="line"></span><br><span class="line">#replace() 将指定字符全部替换成新的字符</span><br><span class="line">SELECT REPLACE(&#39;小明上学迟到了，李华笑了,因为李华也迟到了&#39;,&#39;李华&#39;,&#39;老师&#39;) AS out_put;  #将&#39;李华&#39;替换为&#39;老师&#39;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#数学函数</span><br><span class="line"></span><br><span class="line">#round() 四舍五入，可先不考虑负号。默认不保留小数部分，可以指定小数位数</span><br><span class="line">SELECT ROUND(-1.55); #-2 ，默认不保留小数</span><br><span class="line">SELECT ROUND(-1.558,2); #-1.56 ，指定小数位数为2</span><br><span class="line"></span><br><span class="line">#ceil() 向上取整，返回&gt;&#x3D;参数值的最小整数</span><br><span class="line">SELECT CEIL(-1.002); #-1</span><br><span class="line">SELECT CEIL(1.002); #2</span><br><span class="line"></span><br><span class="line">#floor 向下取整，返回&lt;&#x3D;参数值的最大整数</span><br><span class="line">SELECT FLOOR(9.99);  #9</span><br><span class="line">SELECT FLOOR(-9.99); #-10</span><br><span class="line"></span><br><span class="line">#truncate(num,n) 直接截断至小数点后第n位，不四舍五入</span><br><span class="line">SELECT TRUNCATE(3.8574,2); #3.85</span><br><span class="line"></span><br><span class="line">#mod 取模%（取余），mod(a,b)&#x3D;a-&#x2F;b*b</span><br><span class="line">#可简化为：先不考虑负号，最后令余数与被除数符号一致</span><br><span class="line">SELECT MOD(10,-3); #1</span><br><span class="line">SELECT 10%(-3); #1</span><br><span class="line"></span><br><span class="line">#rand 取随机数，默认返回0-1之间的小数</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#日期函数</span><br><span class="line"></span><br><span class="line">#now() 返回当前系统的日期和时间</span><br><span class="line">SELECT NOW();</span><br><span class="line"></span><br><span class="line">#curdate() 只返回当前系统的日期</span><br><span class="line">SELECT CURDATE();</span><br><span class="line"></span><br><span class="line">#curtime() 只返回当前系统的时间</span><br><span class="line">SELECT CURTIME();</span><br><span class="line"></span><br><span class="line">#获取日期-时间量中指定的部分：年、月、日、小时、分钟、秒</span><br><span class="line">SELECT YEAR(NOW()) 年;</span><br><span class="line">SELECT YEAR(&#39;1998-1-1&#39;) 年;</span><br><span class="line">SELECT YEAR(&#96;hiredate&#96;) 年 FROM &#96;employees&#96;;</span><br><span class="line">SELECT MONTH(NOW()) 月;</span><br><span class="line">SELECT MONTHNAME(NOW()) 月名;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#str_to_date() 将字符串按照指定格式转换为日期类型的值</span><br><span class="line">https:&#x2F;&#x2F;i.bmp.ovh&#x2F;imgs&#x2F;2020&#x2F;08&#x2F;8a6abccb9b1c32c9.png</span><br><span class="line">SELECT STR_TO_DATE(&#39;1998-3-2&#39;,&#39;%Y-%c-%d&#39;) AS out_put;</span><br><span class="line">#查询入职日期为1992-4-3的员工信息</span><br><span class="line">SELECT * FROM &#96;employees&#96;</span><br><span class="line">WHERE &#96;hiredate&#96;&#x3D;&#39;1992-4-3&#39;;#默认就能把这样格式的字符串转为日期类型</span><br><span class="line">SELECT * FROM &#96;employees&#96;</span><br><span class="line">WHERE &#96;hiredate&#96;&#x3D;STR_TO_DATE(&#39;4-3 1992&#39;,&#39;%c-%d %Y&#39;);</span><br><span class="line">					#遇到非典型格式时，用转换函数处理一下</span><br><span class="line"></span><br><span class="line">#date_format() 将日期转换为指定格式的日期字符</span><br><span class="line">SELECT DATE_FORMAT(NOW(),&#39;%Y年%m月%d日&#39;) AS 日期;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#其他函数</span><br><span class="line"></span><br><span class="line">SELECT VERSION(); #MySQL版本</span><br><span class="line">SELECT DATABASE(); #选中（查询）当前数据库</span><br><span class="line">SELECT USER(); #查询当前用户</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#流程控制函数</span><br><span class="line"></span><br><span class="line">#if()函数： if else 的效果，类似三元运算符</span><br><span class="line">SELECT IF(10&lt;5,&#39;小&#39;,&#39;大&#39;);</span><br><span class="line">SELECT </span><br><span class="line">	last_name,</span><br><span class="line">	commission_pct,</span><br><span class="line">	IF(commission_pct IS NULL,&#39;没奖金，呵呵&#39;,&#39;有奖金，嘻嘻&#39;) AS 备注</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#case“函数”</span><br><span class="line">&#x2F;*</span><br><span class="line">case用法1：switch case的效果</span><br><span class="line">java c++:</span><br><span class="line">switch(变量或表达式)&#123;</span><br><span class="line">	case 常量1: 语句1;break;</span><br><span class="line">	...</span><br><span class="line">	default:语句n;break;</span><br><span class="line">&#125;</span><br><span class="line">MySQL：</span><br><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 【要显示的值1（搭配select作为表达式时）】或者【语句1;(单独使用case)】</span><br><span class="line">when 常量2 then 【要显示的值2】或者【语句2;】</span><br><span class="line">...</span><br><span class="line">else 【要显示的值n】或者【语句n;】</span><br><span class="line">end</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例：查询员工的工资，要求:</span><br><span class="line">#部门号&#x3D;30，显示的工资为1.1倍</span><br><span class="line">#部门号&#x3D;40，显示的工资为1.2倍</span><br><span class="line">#部门号&#x3D;50，显示的工资为1.3倍</span><br><span class="line">#其他部门，显示的工资为原工资</span><br><span class="line">SELECT </span><br><span class="line">	salary AS 原始工资,</span><br><span class="line">	department_id,</span><br><span class="line">	CASE department_id</span><br><span class="line">	WHEN 30 THEN salary*1.1</span><br><span class="line">	WHEN 40 THEN salary*1.2</span><br><span class="line">	WHEN 50 THEN salary*1.3</span><br><span class="line">	ELSE salary</span><br><span class="line">	END AS 新工资</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">case用法2：类似多重if</span><br><span class="line">java:</span><br><span class="line">if(条件1)&#123;</span><br><span class="line">	语句1;</span><br><span class="line">&#125;else if(条件2)&#123;</span><br><span class="line">	语句2;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">else&#123;</span><br><span class="line">	语句n;</span><br><span class="line">&#125;</span><br><span class="line">MySQL：</span><br><span class="line">case</span><br><span class="line">when 条件1 then 【要显示的值1（搭配select作为表达式时）】或者【语句1;(单独使用case)】</span><br><span class="line">when 条件2 then 【要显示的值2】或者【语句2;】</span><br><span class="line">...</span><br><span class="line">else 【要显示的值n】或者【语句n;】</span><br><span class="line">end</span><br><span class="line">*&#x2F;</span><br><span class="line">#案例：查询员工的工资情况，要求:</span><br><span class="line">#如果工资20000，显示A级别</span><br><span class="line">#如果工资&gt;15000，显示B级别</span><br><span class="line">#如果工资&gt;10000，显示c级别</span><br><span class="line">#否则，显示D級别</span><br><span class="line">SELECT </span><br><span class="line">	salary,</span><br><span class="line">	CASE</span><br><span class="line">	WHEN salary&gt;20000 THEN &#39;A&#39;</span><br><span class="line">	WHEN salary&gt;15000 THEN &#39;B&#39;</span><br><span class="line">	WHEN salary&gt;10000 THEN &#39;C&#39;</span><br><span class="line">	ELSE &#39;D&#39;</span><br><span class="line">	END AS 工资级别</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 工资级别 ASC;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#单行函数练习</span><br><span class="line"></span><br><span class="line">#将员工的姓名按首字母排序，并写出姓名的字节长度（1ength）</span><br><span class="line">SELECT </span><br><span class="line">	&#96;last_name&#96;,</span><br><span class="line">	LENGTH(last_name) AS 字节长度</span><br><span class="line">	SUBSTR(last_name,1,1) AS 首字母</span><br><span class="line">FROM employees</span><br><span class="line">ORDER BY 首字母 ASC;</span><br><span class="line"></span><br><span class="line">#做一个查询，产生下面的结果：</span><br><span class="line">#&lt;last_name&gt; earns &lt;salary&gt; monthly but wants &lt;salary*3&gt;</span><br><span class="line">#Dream Salary</span><br><span class="line">#King earns 24000 monthly but wants 72000</span><br><span class="line">SELECT CONCAT(last_name,&#39; earns &#39;,salary,</span><br><span class="line">	&#39; monthly but wants &#39;,salary*3)</span><br><span class="line">	AS &quot;Dream Salary&quot;</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#给不同的职业分级</span><br><span class="line">SELECT</span><br><span class="line">	job_id AS job,</span><br><span class="line">	CASE job_id</span><br><span class="line">	WHEN &#39;AD_PRES&#39; THEN &#39;A&#39;</span><br><span class="line">	WHEN &#39;ST_MAN&#39; THEN &#39;B&#39;</span><br><span class="line">	WHEN &#39;IT_PROG&#39; THEN &#39;C&#39;</span><br><span class="line">	WHEN &#39;SA_REP&#39; THEN &#39;D&#39;</span><br><span class="line">	WHEN &#39;ST_CLERK&#39; THEN &#39;E&#39;  </span><br><span class="line">    		#如果对其他情况不做处理，可以省略else,得到的值为null</span><br><span class="line">	END AS grade</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id </span><br><span class="line">IN (&#39;AD_PRES&#39;,&#39;ST_MAN&#39;,&#39;IT_PROG&#39;,</span><br><span class="line">	&#39;SA_REP&#39;,&#39;ST_CLERK&#39;);</span><br></pre></td></tr></table></figure>

<p><strong>分组函数</strong></p>
<p>功能：用于数值统计，又称聚合函数、统计函数、组函数</p>
<p>分类：求和sum，平均值avg，最大值max，最小值min，计算个数count</p>
<p>特点：</p>
<p>​    1.一般用于处理数值类型，但max，min，count能处理任何类型</p>
<p>​    2.都会忽略null值</p>
<p>​    3.可以和distinct搭配实现去重</p>
<p>​    4.<strong>统计整表（整组）行数</strong>一般用<strong>count(*)</strong></p>
<p>​    5.和分组函数一同查询的字段要求是分组后的字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#简单使用</span><br><span class="line">SELECT </span><br><span class="line">	SUM(salary), </span><br><span class="line">	AVG(salary), </span><br><span class="line">	MIN(salary), </span><br><span class="line">	MAX(salary), </span><br><span class="line">	COUNT(salary) </span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#支持的参数类型</span><br><span class="line">&#x2F;*</span><br><span class="line">sum()也支持字符串、日期型参数，不报错，但没有意义</span><br><span class="line">max()、min()也支持字符串型和日期型，毕竟他们都可以排序</span><br><span class="line">count()只计算不为null的数据的个数</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#关于null值是否被忽略</span><br><span class="line">SELECT </span><br><span class="line">	SUM(&#96;commission_pct&#96;),</span><br><span class="line">	AVG(&#96;commission_pct&#96;),</span><br><span class="line">	SUM(&#96;commission_pct&#96;)&#x2F;35,</span><br><span class="line">	SUM(&#96;commission_pct&#96;)&#x2F;107,</span><br><span class="line">	MAX(&#96;commission_pct&#96;),</span><br><span class="line">	MIN(&#96;commission_pct&#96;),</span><br><span class="line">	COUNT(&#96;commission_pct&#96;)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">#都可以和distinct搭配实现去重</span><br><span class="line">SELECT SUM(DISTINCT salary),SUM(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">SELECT </span><br><span class="line">	COUNT(DISTINCT salary),</span><br><span class="line">	COUNT(salary)</span><br><span class="line">FROM employees;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#count()函数详细介绍</span><br><span class="line">#统计行数一般用count(*)，只要有一列不为null，就将当前行计入总数</span><br><span class="line">#也可以用count(常量)，相当于追加一列常量，然后统计这个常量的数量</span><br><span class="line">#也可以直接用count(字段名)，但不含值为null的行</span><br><span class="line">&#x2F;*</span><br><span class="line">效率：</span><br><span class="line">	MYISAM存储引擎下，COUNT（*）的效率高</span><br><span class="line">	INNODB存储引擎下，COUNT（*）和COUNT（1）的效率差不多，比COUNT（字段）要高一些</span><br><span class="line">*&#x2F;</span><br><span class="line">SELECT COUNT(salary) FROM employees;</span><br><span class="line">SELECT COUNT(*) FROM employees;</span><br><span class="line">SELECT COUNT(1) FROM employees;</span><br><span class="line"></span><br><span class="line">#和分组函数一同查询的字段有限制，要求是分组后的字段</span><br><span class="line">SELECT AVG(salary),last_name FROM employees;</span><br><span class="line">	#因为要形成一个完整表格，而查询的这两项并不能形成有意义的表格，</span><br><span class="line">	#因此这一句没有意义</span><br><span class="line"></span><br><span class="line">#案例：最大入职时间和最小入职时间相差的天数，用日期函数datediff</span><br><span class="line">SELECT DATEDIFF(MAX(hiredate),MIN(hiredate)) 差几天</span><br><span class="line">FROM employees;</span><br><span class="line">SELECT </span><br><span class="line">	DATEDIFF(NOW(),&#39;1994-7-15&#39;) AS 活了多久,</span><br><span class="line">	DATEDIFF(&#39;2079-7-15&#39;,&#39;1994-7-15&#39;) AS 能活多久,</span><br><span class="line">	DATEDIFF(&#39;2079-7-15&#39;,&#39;1994-7-15&#39;)-DATEDIFF(NOW(),&#39;1996-7-21&#39;) </span><br><span class="line">	 AS 还能活多久;</span><br><span class="line">	 </span><br><span class="line">#案例:查询部门编号为90的员工个数</span><br><span class="line">SELECT COUNT(*) #或者用COUNT(1)或COUNT(department_id)</span><br><span class="line">FROM employees</span><br><span class="line">WHERE &#96;department_id&#96;&#x3D;90;</span><br><span class="line">#ps:执行顺序：from-&gt;where-&gt;select,因此是筛选过后才调用的count()</span><br></pre></td></tr></table></figure>

<h6 id="5-分组查询："><a href="#5-分组查询：" class="headerlink" title="5.分组查询："></a>5.分组查询：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 分组函数列表，分组后的字段（group by后面据以分组的字段，</span><br><span class="line">								顺序不重要，还可以省略）</span><br><span class="line">	from 表名</span><br><span class="line">	【where 分组前的筛选条件】</span><br><span class="line">	group by 据以分组的字段</span><br><span class="line">	【having 分组后的筛选条件】</span><br><span class="line">	【order by 排序列表】</span><br><span class="line">注意：</span><br><span class="line">	查询列表必须特殊，要求是分组函数和group by后出现的字段;</span><br><span class="line">	group by和having后面一般不用别名，因为有些DBMS不兼容。</span><br><span class="line">特点：</span><br><span class="line">	1.分组查询的筛选条件分为两类：</span><br><span class="line">		分组前的筛选：数据源为原始表，位于group by子句前的where子句</span><br><span class="line">		分组后的筛选：数据源为分组后的结果表，位于group by子句后的						having子句</span><br><span class="line">		分组函数做筛选条件肯定是放在having子句</span><br><span class="line">		能用分组前筛选的，优先采用分组前筛选（考虑性能）</span><br><span class="line">	2.group by子句支持按单&#x2F;多字段分组（多个字段用逗号隔开），支持按表达			式或函数分组（相对较少用）</span><br><span class="line">	3.可以添加排序，放在整个分组查询语句的最后</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#引入：查询每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY &#96;department_id&#96; ASC;</span><br><span class="line"></span><br><span class="line">#简单的分组查询</span><br><span class="line">#案例1：查询每个工种的最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id;</span><br><span class="line"></span><br><span class="line">#案例2：查询每个位置上的部门个数</span><br><span class="line">SELECT </span><br><span class="line">	COUNT(*),#或者COUNT(&#96;department_id&#96;),</span><br><span class="line">	&#96;location_id&#96;</span><br><span class="line">FROM departments</span><br><span class="line">GROUP BY &#96;location_id&#96;;</span><br><span class="line"></span><br><span class="line">#添加分组前的筛选条件</span><br><span class="line">#案例1：查询邮箱中包含a字符的，每个部门的平均工资</span><br><span class="line">SELECT AVG(salary),MAX(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#39;%a%&#39;</span><br><span class="line">GROUP BY department_id;</span><br><span class="line"></span><br><span class="line">#案例2：查询有奖金的每个领导手下员工的最高工资</span><br><span class="line">SELECT MAX(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">GROUP BY manager_id;</span><br><span class="line"></span><br><span class="line">#添加分组后的筛选条件</span><br><span class="line">#案例1：查询员工个数&gt;2的部门有哪些</span><br><span class="line">#先分组查询出每个部门的员工数量，再用关键字having筛选出数量大于2的组</span><br><span class="line">#having筛选是对分组后的结果进行的筛选</span><br><span class="line">SELECT COUNT(*),&#96;department_id&#96;</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY &#96;department_id&#96;</span><br><span class="line">HAVING COUNT(*)&gt;2;</span><br><span class="line"></span><br><span class="line">#案例2：查询工种内工资最高且&gt;12000的有奖金的员工的工种编号和最高工资</span><br><span class="line">SELECT MAX(salary),job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE &#96;commission_pct&#96; IS NOT NULL</span><br><span class="line">GROUP BY job_id</span><br><span class="line">HAVING MAX(salary)&gt;12000;</span><br><span class="line"></span><br><span class="line">#案例3：查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号是哪个，以及其最低工资</span><br><span class="line">SELECT MIN(salary),manager_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&gt;102</span><br><span class="line">GROUP BY manager_id</span><br><span class="line">HAVING MIN(salary)&gt;5000;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#按表达式或函数分组</span><br><span class="line">#案例：按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5的有哪些</span><br><span class="line">SELECT COUNT(*) AS 员工个数,LENGTH(last_name) AS 姓名长度</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY 姓名长度</span><br><span class="line">HAVING 员工个数&gt;5;</span><br><span class="line">ORDER BY 姓名长度;</span><br><span class="line">#ps:oracle不支持group by和having后面使用别名</span><br><span class="line"></span><br><span class="line">#按多个字段分组（多个字段相同的分在同一组，与顺序无关）</span><br><span class="line">#案例：查询每个部门每个工种的员工的平均工资</span><br><span class="line">SELECT AVG(salary),&#96;department_id&#96;,job_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY job_id,department_id;</span><br><span class="line"></span><br><span class="line">#添加排序</span><br><span class="line">#案例：查询每个部门每个工种的员工的平均工资，并且按平均工资的高低显示</span><br><span class="line">SELECT AVG(salary),&#96;department_id&#96;,job_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IS NOT NULL</span><br><span class="line">GROUP BY job_id,department_id</span><br><span class="line">HAVING AVG(salary)&gt;10000</span><br><span class="line">ORDER BY AVG(salary) DESC;</span><br></pre></td></tr></table></figure>

<h6 id="6-连接查询："><a href="#6-连接查询：" class="headerlink" title="6.连接查询："></a>6.连接查询：</h6><p>含义：又称多表查询，当查询的字段来自于多个表时，就会用到连接查询</p>
<p>笛卡尔乘积现象：表1有m行，表2有n行，连接后的结果表有m<em>n行，原因在于没有有效的*</em>连接条件**，添加有效连接条件就可以避免。</p>
<p><strong>细节</strong>：连接条件放在where子句，对待连接表的每一行数据都用连接条件筛选一下，共有（m*n）行数据需要比对连接条件，符合条件就连为一行，否则忽略掉当前行的组合。</p>
<p>分类：</p>
<p>​        按年代：<strong>sql92标准</strong>（在MySQL仅支持内连接）、<strong>sql99标准</strong>（在MySQL支持内                        连接、外连接（左外、右外）和交叉连接）（推荐）</p>
<p>​        按功能：</p>
<p>​                        内连接：等值连接、非等值连接、自连接</p>
<p>​                        外连接：左外连接、右外连接、全外连接</p>
<p>​                        交叉连接：</p>
<p><strong>总结比较</strong>：求交集用内连接，求两表只差用外连接，求并集用交叉连接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一、sql92标准</span><br><span class="line">#1.等值连接</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名，表2 别名</span><br><span class="line">	where 表1.key-表2.key</span><br><span class="line">	【and 分组前筛选条件】</span><br><span class="line">	【group by 分组字段列表】</span><br><span class="line">	【having 分组后的筛选条件】</span><br><span class="line">	【order by 排序字段列表】</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">	1.多表等值连接的结果为多表的交集部分</span><br><span class="line">	2.n表连接，至少需要n-1个连接条件</span><br><span class="line">	3.多个表的顺序没有要求</span><br><span class="line">	4.一般需要为表起别名</span><br><span class="line">	5.可以搭配前面介绍的所有子句使用，比如排序、分组、筛选</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例1：查询女神名和对应的男神名</span><br><span class="line">SELECT NAME,boyName </span><br><span class="line">FROM boys,beauty</span><br><span class="line">WHERE boys.&#96;id&#96;&#x3D;beauty.&#96;boyfriend_id&#96;;</span><br><span class="line"></span><br><span class="line">#案例2：查询员工名和对应的部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.&#96;department_id&#96;&#x3D;departments.&#96;department_id&#96;</span><br><span class="line">ORDER BY department_name ASC;</span><br><span class="line"></span><br><span class="line">#2.在from子句处为表起别名</span><br><span class="line">&#x2F;*</span><br><span class="line">好处：</span><br><span class="line">	1.提高语句简洁度</span><br><span class="line">	2.区分多个重名的字段（其实是加限定的作用）</span><br><span class="line">ps:如果为表起了别名，则查询的字段就不能使用原来的表名去限定</span><br><span class="line">*&#x2F;</span><br><span class="line">#查询员工名、工种号、工种名</span><br><span class="line">SELECT last_name,e.job_id,job_title</span><br><span class="line">FROM employees AS e,jobs AS j</span><br><span class="line">WHERE e.&#96;job_id&#96;&#x3D;j.&#96;job_id&#96;;</span><br><span class="line"></span><br><span class="line">#3.两个表的顺序是否可以调换？可以的，因为只是求表的交集</span><br><span class="line"></span><br><span class="line">#4.是否可以加筛选条件,能，还是在where子句，放在连接条件之后</span><br><span class="line"></span><br><span class="line">#案例1：查询有奖金的员工名、部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees,departments</span><br><span class="line">WHERE employees.&#96;department_id&#96;&#x3D;departments.&#96;department_id&#96;</span><br><span class="line">ORDER BY department_name ASC;</span><br><span class="line"></span><br><span class="line">#案例2：查询城市名中第二个字符为o的部门名和城市名</span><br><span class="line">SELECT department_name,city</span><br><span class="line">FROM departments AS d,locations AS l</span><br><span class="line">WHERE d.&#96;location_id&#96;&#x3D;l.&#96;location_id&#96;</span><br><span class="line">AND city LIKE&#39;_o%&#39;;</span><br><span class="line"></span><br><span class="line">#5、是否可以加分组？</span><br><span class="line"></span><br><span class="line">#案例1：查询每个城市的部门个数</span><br><span class="line">SELECT COUNT(*) AS 部门个数,city</span><br><span class="line">FROM departments AS d,locations AS l</span><br><span class="line">WHERE d.&#96;location_id&#96;&#x3D;l.&#96;location_id&#96;</span><br><span class="line">GROUP BY city;</span><br><span class="line"></span><br><span class="line">#案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</span><br><span class="line">SELECT department_name,d.manager_id,MIN(salary)</span><br><span class="line">FROM departments AS d,employees AS e</span><br><span class="line">WHERE d.&#96;department_id&#96;&#x3D;e.&#96;department_id&#96;</span><br><span class="line">AND commission_pct IS NOT NULL</span><br><span class="line">GROUP BY department_name;</span><br><span class="line"></span><br><span class="line">#6.可以加排序</span><br><span class="line">#案例：查询每个工种的工种名和员工的个数，并且按员工个数降序</span><br><span class="line">SELECT job_title,COUNT(*) AS 员工个数</span><br><span class="line">FROM jobs AS j,employees AS e</span><br><span class="line">WHERE j.&#96;job_id&#96;&#x3D;e.&#96;job_id&#96;</span><br><span class="line">GROUP BY job_title</span><br><span class="line">ORDER BY 员工个数;</span><br><span class="line"></span><br><span class="line">#7.实现三表连接</span><br><span class="line">#案例：查询员工名、部门名和所在的城市</span><br><span class="line">SELECT last_name,department_name,city</span><br><span class="line">FROM employees e,departments d,locations l</span><br><span class="line">WHERE e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">AND d.&#96;location_id&#96;&#x3D;l.&#96;location_id&#96;</span><br><span class="line">AND city LIKE &#39;s%&#39;</span><br><span class="line">ORDER BY department_name ASC;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#2.非等值连接</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名，表2 别名</span><br><span class="line">	where 非等值连接条件</span><br><span class="line">	【and 分组前筛选条件】</span><br><span class="line">	【group by 分组字段列表】</span><br><span class="line">	【having 分组后的筛选条件】</span><br><span class="line">	【order by 排序字段列表】</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例1：查询员工的工资和工资级别</span><br><span class="line">SELECT salary,grade_level</span><br><span class="line">FROM employees AS e,job_grades AS g</span><br><span class="line">WHERE e.&#96;salary&#96; BETWEEN g.&#96;lowest_sal&#96; AND g.&#96;highest_sal&#96;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#3.自连接</span><br><span class="line">#所查询的数据位于同一个表，用别名把一个表当成多个表来用，然后用连接条件连接</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表 别名1，表 别名2</span><br><span class="line">	where （等值）连接条件</span><br><span class="line">	【and 分组前筛选条件】</span><br><span class="line">	【group by 分组字段列表】</span><br><span class="line">	【having 分组后的筛选条件】</span><br><span class="line">	【order by 排序字段列表】</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例：查询员工名和上级的名称</span><br><span class="line">SELECT </span><br><span class="line">	e.last_name 员工名,</span><br><span class="line">	e.&#96;employee_id&#96; 员工id,</span><br><span class="line">	m.&#96;last_name&#96; 上级名,</span><br><span class="line">	m.&#96;employee_id&#96; 上级id</span><br><span class="line">FROM employees AS e,employees AS m</span><br><span class="line">WHERE e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一、sql99标准</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名 【连接类型】</span><br><span class="line">	join 表2 别名</span><br><span class="line">	on 连接条件</span><br><span class="line">	【where 分组前筛选条件】</span><br><span class="line">	【group by 分组字段列表】</span><br><span class="line">	【having 分组后的筛选条件】</span><br><span class="line">	【order by 排序字段列表】</span><br><span class="line">分类：</span><br><span class="line">内连接：inner</span><br><span class="line">外连接：</span><br><span class="line">	左外：left【outer】</span><br><span class="line">	右外：right【outer】</span><br><span class="line">	全外：full【outer】</span><br><span class="line">交叉连接：cross  (不需要on+连接条件)</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line">	1.多表等值连接的结果为多表的交集部分</span><br><span class="line">	</span><br><span class="line">#一、内连接</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表 </span><br><span class="line">	from 表1 别名 </span><br><span class="line">	inner join 表2 别名</span><br><span class="line">	on 连接条件1</span><br><span class="line">	inner join 表3 别名</span><br><span class="line">	on 连接条件2</span><br><span class="line">	...</span><br><span class="line">ps:连接顺序是会影响结果的，但如果有连接条件，顺序就不重要，后面的表至少要与前面的1个表有连接条件。</span><br><span class="line"></span><br><span class="line">分类：</span><br><span class="line">	等值连接</span><br><span class="line">	非等值连接</span><br><span class="line">	自连接</span><br><span class="line">	</span><br><span class="line">特点：</span><br><span class="line">	1.可以添加排序、分组、筛选</span><br><span class="line">	2.inner可以省略</span><br><span class="line">	3.筛选条件放在where后面，连接条件放在on后面，提高分离性，便于阅读</span><br><span class="line">	4.inner join连接和sq192语法中的等值连接效果是一样的，都是查询多表的交集</span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.等值连接</span><br><span class="line">#案例1：查询员工名、部门名</span><br><span class="line">SELECT last_name,department_name</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN departments AS d</span><br><span class="line">ON e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;;</span><br><span class="line"></span><br><span class="line">#案例2：查询名字中包含e的员工名和工种名（添加筛选）</span><br><span class="line">SELECT last_name,job_title</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN jobs AS j</span><br><span class="line">ON e.&#96;job_id&#96;&#x3D;j.&#96;job_id&#96;</span><br><span class="line">WHERE last_name LIKE &#39;%e%&#39;;</span><br><span class="line"></span><br><span class="line">#案例3：查询部门个数》3的城市名名和部门个数，（添加分组+筛选）</span><br><span class="line">SELECT city,COUNT(*) 部门个数</span><br><span class="line">FROM departments AS d</span><br><span class="line">INNER JOIN locations AS l</span><br><span class="line">ON d.&#96;location_id&#96;&#x3D;l.&#96;location_id&#96;</span><br><span class="line">GROUP BY city</span><br><span class="line">HAVING COUNT(*)&gt;3;</span><br><span class="line"></span><br><span class="line">#案例4：查询哪个部门的部门员工个数》3的部门名和员工个数，并按个数降序（排序）</span><br><span class="line">SELECT department_name,COUNT(*) 员工个数</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN departments AS d</span><br><span class="line">ON e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">GROUP BY department_name</span><br><span class="line">HAVING COUNT(*)&gt;3</span><br><span class="line">ORDER BY 员工个数 DESC;</span><br><span class="line"></span><br><span class="line">#案例5：查询员工名、部门名、工种名，并按部门名降序</span><br><span class="line"></span><br><span class="line">#2.非等值连接</span><br><span class="line">#查询员工的工资级别</span><br><span class="line">SELECT last_name,salary,grade_level</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN job_grades AS g</span><br><span class="line">ON salary BETWEEN lowest_sal AND highest_sal;</span><br><span class="line"></span><br><span class="line">#查询员工数大于20的工资级别，并按工资级别降序</span><br><span class="line">SELECT COUNT(*) 员工数,grade_level</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN job_grades AS g</span><br><span class="line">ON salary BETWEEN lowest_sal AND highest_sal</span><br><span class="line">GROUP BY grade_level</span><br><span class="line">HAVING COUNT(*)&gt;20</span><br><span class="line">ORDER BY grade_level DESC;</span><br><span class="line"></span><br><span class="line">#3.子连接</span><br><span class="line">#查询员工的名字和上级的名字</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN employees AS m</span><br><span class="line">ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;;</span><br><span class="line"></span><br><span class="line">#查询姓名中含有&#39;k&#39;的员工的名字和上级的名字</span><br><span class="line">SELECT e.last_name,m.last_name</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN employees AS m</span><br><span class="line">ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;</span><br><span class="line">WHERE e.&#96;last_name&#96; LIKE &#39;%k%&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#二、外连接</span><br><span class="line">&#x2F;*</span><br><span class="line">应用场景：用于查询一个表中有，另一个表中没有的记录</span><br><span class="line">特点：</span><br><span class="line">	1、外连接的查询结果为主表中的所有记录</span><br><span class="line">		如果从表中有和它匹配的，则显示匹配的值</span><br><span class="line">		如果从表中没有和它匹配的，则显示null</span><br><span class="line">		外连接查询结果&#x3D;内连接结果+主表中有而从表没有的记录</span><br><span class="line">	2、左外连接，left join左边的是主表,右外连接，right join右边的是主表</span><br><span class="line">	3、左外和右外交换两个表的顺序，可以实现同样的效果</span><br><span class="line">	4.全外连接&#x3D;内连接的结果+表1中有但表2没有的+表2中有但表1没有的</span><br><span class="line">ps:没有匹配时，次表中的主键一定是从非null变成null，因此适合做筛选条件</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#引入：左（右）外连接：查询男朋友不在男神表中的女神名</span><br><span class="line">SELECT &#96;name&#96;,b.*</span><br><span class="line">FROM beauty</span><br><span class="line">LEFT OUTER JOIN boys AS b</span><br><span class="line">ON boyfriend_id&#x3D;b.&#96;id&#96;</span><br><span class="line">WHERE b.&#96;id&#96; IS NULL;</span><br><span class="line"></span><br><span class="line">#案例：查询哪个部门没有员工</span><br><span class="line">SELECT DISTINCT department_name</span><br><span class="line">FROM departments AS d</span><br><span class="line">LEFT OUTER JOIN employees AS e</span><br><span class="line">ON d.&#96;department_id&#96;&#x3D;e.&#96;department_id&#96;</span><br><span class="line">WHERE e.&#96;department_id&#96; IS NULL;</span><br><span class="line">#或者</span><br><span class="line">SELECT DISTINCT department_name</span><br><span class="line">FROM employees AS e</span><br><span class="line">RIGHT OUTER JOIN departments AS d</span><br><span class="line">ON d.&#96;department_id&#96;&#x3D;e.&#96;department_id&#96;</span><br><span class="line">WHERE e.&#96;department_id&#96; IS NULL;</span><br><span class="line"></span><br><span class="line">#MySQL不支持的全外连接</span><br><span class="line">select</span><br><span class="line">from 表1</span><br><span class="line">full outer join 表2</span><br><span class="line">on 连接条件;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#三、交叉连接</span><br><span class="line">SELECT *  #或者select b.*,bo.*</span><br><span class="line">FROM beauty AS b</span><br><span class="line">CROSS JOIN boys AS bo;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#练习</span><br><span class="line"></span><br><span class="line">#1.查询编号&gt;3的女神的男朋友信息，如果有则列出详细，如果没有，用nul1填充</span><br><span class="line">SELECT b.&#96;name&#96;,b.&#96;id&#96;,bo.*</span><br><span class="line">FROM beauty AS b</span><br><span class="line">LEFT OUTER JOIN boys AS bo</span><br><span class="line">ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">WHERE b.&#96;id&#96;&gt;3;</span><br><span class="line"></span><br><span class="line">#2.查询哪个城市没有部门</span><br><span class="line">SELECT city</span><br><span class="line">FROM locations AS l</span><br><span class="line">LEFT OUTER JOIN departments AS d</span><br><span class="line">ON l.&#96;location_id&#96;&#x3D;d.&#96;location_id&#96;</span><br><span class="line">WHERE d.&#96;department_id&#96; IS NULL;</span><br><span class="line"></span><br><span class="line">#3.查询部门名为SAL或IT的员工信息（交集）</span><br><span class="line">SELECT d.&#96;department_name&#96;,e.*</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN departments AS d</span><br><span class="line">ON e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">WHERE d.&#96;department_name&#96; IN(&#39;SAL&#39;,&#39;IT&#39;);</span><br></pre></td></tr></table></figure>

<h6 id="7-子查询※："><a href="#7-子查询※：" class="headerlink" title="7.子查询※："></a>7.子查询※：</h6><p><strong>含义</strong>：</p>
<p>嵌套在其他语句中的select语句，称为子查询或内查询；</p>
<p>子查询外层的语句可以是insert,update,delete,select等，<strong>一般是select作为外层语句</strong>；</p>
<p>内部嵌套了其他select语句的select语句，称为主查询或外查询。</p>
<p><strong>分类</strong>：</p>
<p>​        按子查询出现的位置：</p>
<p>​                    select后面：仅支持标量子查询</p>
<p>​                    from后面：支持表子查询</p>
<p>​                    <strong>where或having后面：支持标量子查询和列子查询</strong>，行子查询用的较少</p>
<p>​                    exists后面（相关子查询）：支持表子查询</p>
<p>​        按结果集的行列数不同：</p>
<p>​                    标量子查询（结果集仅一行一列）</p>
<p>​                    列子查询（结果集为一列多行）</p>
<p>​                    行子查询（结果集为一行多列）</p>
<p>​                    表子查询（结果集一般为多行多列，无所谓几行几列）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一、where或having后面</span><br><span class="line"></span><br><span class="line">#1.标量子查询（单行子查询）</span><br><span class="line">#2.列子查询（多行子查询）</span><br><span class="line">#3.行子查询</span><br><span class="line">&#x2F;*</span><br><span class="line">特点：</span><br><span class="line">	1.子查询放在小括号内</span><br><span class="line">	2.子查询一般放在条件的右侧</span><br><span class="line">	3.标量子查询，一般搭配着单行操作符使用</span><br><span class="line">						&gt;&lt;&gt;&#x3D;&lt;&#x3D;&#x3D;&gt;</span><br><span class="line">	列子查询，一般搭配着多行操作符使用</span><br><span class="line">						in&#x2F;not in，any|some，all</span><br><span class="line">	4.子查询的执行优先于主查询执行，主查询的条件用到了子查询的结果</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.标量子查询</span><br><span class="line"></span><br><span class="line">#案例1：查询谁的工资比Abel高</span><br><span class="line">#第一步：查询Abel的工资</span><br><span class="line">SELECT salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE last_name&#x3D;&#39;Abel&#39;;</span><br><span class="line">#第二步：查询员工信息，要求满足salary&gt;第一步的结果</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">	SELECT salary</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE last_name&#x3D;&#39;Abel&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&#x3D;(</span><br><span class="line">	SELECT job_id</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE employee_id&#x3D;141</span><br><span class="line">)AND salary&gt;(</span><br><span class="line">	SELECT salary</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE employee_id&#x3D;143</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例3：返回工资最少的员工的last_name，job_id和salary</span><br><span class="line">SELECT last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&#x3D;(</span><br><span class="line">	SELECT MIN(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例4：查询最低工资大于50号部门最低工资的部门id和其最低工资</span><br><span class="line">SELECT department_id,MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">	SELECT MIN(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE department_id&#x3D;50</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#非法使用标量子查询</span><br><span class="line">SELECT department_id,MIN(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING MIN(salary)&gt;(</span><br><span class="line">	SELECT salary    #需要的是单行的结果，但返回的是多行的结果</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE department_id&#x3D;250  #查不到，结果为空</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#2.列子查询</span><br><span class="line">#案例1：返回location_id是1400或1700的部门中的所有员工姓名</span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM departments</span><br><span class="line">	WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br><span class="line">#或者</span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &#x3D;ANY(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM departments</span><br><span class="line">	WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br><span class="line">#反过来就是:</span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id not IN(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM departments</span><br><span class="line">	WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br><span class="line">#或者</span><br><span class="line">SELECT last_name</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id &lt;&gt;ALL(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM departments</span><br><span class="line">	WHERE location_id IN(1400,1700)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2：返回其他工种中比job_id（工种）为&#39;IT_PROG&#39;的任意员工的工资低的 员工的员工号、姓名、job_id以及salary</span><br><span class="line">SELECT employee_id,last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&lt;&gt;&#39;IT_PROG&#39;</span><br><span class="line">AND salary&lt;ANY(</span><br><span class="line">	SELECT DISTINCT salary</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id&#x3D;&#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line">#或者用标量子查询：</span><br><span class="line">SELECT employee_id,last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&lt;&gt;&#39;IT_PROG&#39;</span><br><span class="line">AND salary&lt;(</span><br><span class="line">	SELECT MAX(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id&#x3D;&#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例3：返回其它工种中比job_id为&#39;IT_PROG&#39;的所有员工的工资都低的 员工的员工号、姓名、jobid以及salary</span><br><span class="line">SELECT employee_id,last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&lt;&gt;&#39;IT_PROG&#39;</span><br><span class="line">AND salary&lt;ALL(</span><br><span class="line">	SELECT DISTINCT salary</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id&#x3D;&#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line">#或者用标量子查询：</span><br><span class="line">SELECT employee_id,last_name,job_id,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE job_id&lt;&gt;&#39;IT_PROG&#39;</span><br><span class="line">AND salary&lt;(</span><br><span class="line">	SELECT MIN(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE job_id&#x3D;&#39;IT_PROG&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#3.行子查询（结果集为一行多列，或者多行多列）</span><br><span class="line">#案例：查询员工编号最小并且工资最高的员工信息</span><br><span class="line">#原来的做法</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id&#x3D;(</span><br><span class="line">	SELECT MIN(employee_id)</span><br><span class="line">	FROM employees</span><br><span class="line">) AND salary&#x3D;(</span><br><span class="line">	SELECT MAX(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line">#两个条件都是&#x3D;，可以用行子查询实现：</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE (employee_id,salary)&#x3D;(</span><br><span class="line">	SELECT MIN(employee_id),MAX(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#二、位于select后面的子查询</span><br><span class="line">#特点：仅仅支持标量子查询</span><br><span class="line"></span><br><span class="line">#案例1：查询每个部门的员工个数</span><br><span class="line">#直接的做法，先用连接查询生成所需的派生表，再分组统计员工个数</span><br><span class="line">SELECT dd.&#96;department_id&#96;,dd.&#96;department_name&#96;,COUNT(dd.employee_id) AS 员工个数</span><br><span class="line">FROM(</span><br><span class="line">	SELECT d.*,employee_id</span><br><span class="line">	FROM departments AS d</span><br><span class="line">	LEFT OUTER JOIN employees AS e</span><br><span class="line">	ON d.&#96;department_id&#96;&#x3D;e.&#96;department_id&#96;</span><br><span class="line">) AS dd</span><br><span class="line">GROUP BY dd.&#96;department_id&#96;;</span><br><span class="line">#在select后面运用子查询</span><br><span class="line">SELECT d.*,(</span><br><span class="line">	SELECT COUNT(*)</span><br><span class="line">	FROM employees AS e</span><br><span class="line">	WHERE e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">) AS 员工个数</span><br><span class="line">FROM departments AS d;</span><br><span class="line">#ps:感觉像是循环嵌套，内层的select每次调用count(*)都只对应外层select的一个d.&#96;department_id&#96;</span><br><span class="line">#ps:外层的d表可以在内层直接使用，有点儿变量作用域的意味；但是前面where和having后面的子查询似乎是跟外层查询隔离的，每次都与需要重新from表，即使外层用的是同样的表。不过也可能是因为from字句是必须的，但from后面又不能啥也不写。另外案例中内层查询不能在from后面再加departments AS d，否则子查询就变成内连接了。这里按循环嵌套理解就好了。</span><br><span class="line"></span><br><span class="line">#案例2：查询员工号为102的员工所在部门的部门名</span><br><span class="line">#直接用where后子查询做：</span><br><span class="line">SELECT d.&#96;department_name&#96;</span><br><span class="line">FROM departments AS d</span><br><span class="line">WHERE d.&#96;department_id&#96; IN(</span><br><span class="line">	SELECT DISTINCT e.department_id</span><br><span class="line">	FROM employees AS e</span><br><span class="line">	WHERE e.employee_id&#x3D;102</span><br><span class="line">);</span><br><span class="line">#或者用内连接查询做：</span><br><span class="line">SELECT d.&#96;department_name&#96;</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN departments AS d</span><br><span class="line">ON e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">WHERE e.&#96;employee_id&#96;&#x3D;102;</span><br><span class="line">#或者：</span><br><span class="line">SELECT(    #这里要求子查询结果为一行一列</span><br><span class="line">	SELECT d.&#96;department_name&#96;</span><br><span class="line">	FROM employees AS e</span><br><span class="line">	INNER JOIN departments AS d</span><br><span class="line">	ON e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">	WHERE e.&#96;employee_id&#96;&#x3D;102</span><br><span class="line">) AS 部门名;</span><br><span class="line">#ps:直接用内连接或者where后子查询就能完成，这样的写法反而麻烦，因此较少使用。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#三、位于from后面的子查询</span><br><span class="line">#注意：将子查询结果作为一张表，必须起别名</span><br><span class="line"></span><br><span class="line">#案例：查询每个部门的平均公工资的工资等级</span><br><span class="line">SELECT dd.*,j.grade_level</span><br><span class="line">FROM(</span><br><span class="line">	SELECT department_id,AVG(salary) AS avg_sal</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">) AS dd</span><br><span class="line">LEFT JOIN job_grades AS j</span><br><span class="line">ON dd.avg_sal BETWEEN j.&#96;lowest_sal&#96; AND j.&#96;highest_sal&#96;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#四、位于exists后面的子查询(相关子查询)</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	exists（完整的查询语句）</span><br><span class="line">结果：0或1</span><br><span class="line">ps:感觉这exists就是个以查询结果为参数的函数，功能就是判断结果表是否存在内容</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#引入</span><br><span class="line">SELECT EXISTS(SELECT * FROM employees) AS 结果;</span><br><span class="line">SELECT EXISTS(SELECT * FROM employees WHERE salary&#x3D;30000) AS 结果;</span><br><span class="line"></span><br><span class="line">#案例1：查询有员工名的部门的部门名</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments AS d</span><br><span class="line">WHERE EXISTS(</span><br><span class="line">	SELECT *</span><br><span class="line">	FROM employees AS e</span><br><span class="line">	WHERE e.&#96;department_id&#96;&#x3D;d.&#96;department_id&#96;</span><br><span class="line">);</span><br><span class="line">#或者：</span><br><span class="line">SELECT department_name</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id IN (</span><br><span class="line">	SELECT DISTINCT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#案例2：查询没有女朋友的boy</span><br><span class="line">SELECT boyName</span><br><span class="line">FROM boys AS bo</span><br><span class="line">WHERE NOT EXISTS(</span><br><span class="line">	SELECT *</span><br><span class="line">	FROM beauty AS b</span><br><span class="line">	WHERE b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">);</span><br><span class="line">#或者：</span><br><span class="line">SELECT boyName</span><br><span class="line">FROM boys </span><br><span class="line">WHERE id NOT IN(</span><br><span class="line">	SELECT DISTINCT boyfriend_id</span><br><span class="line">	FROM beauty</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#练习</span><br><span class="line"></span><br><span class="line">#1.查询和Zlotkey所在部门相同的员工的姓名和工资</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&#x3D;(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE last_name&#x3D;&#39;Zlotkey&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.查询工资比公司平均工资高的员工的员工号，姓名和工资.</span><br><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&gt;(</span><br><span class="line">	SELECT AVG(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#3·查询各部门中工资比本部门平均工资高的员工的员工号，姓名和工资</span><br><span class="line">SELECT employee_id,last_name,salary</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN (</span><br><span class="line">	SELECT AVG(salary) AS avg_sal,department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">)AS avg_dep</span><br><span class="line">ON e.department_id&#x3D;avg_dep.department_id</span><br><span class="line">WHERE salary&gt;avg_sal;</span><br><span class="line"></span><br><span class="line">#4.查询与姓名中含字母u的员工在相同部门的员工的员工号和姓名</span><br><span class="line">SELECT employee_id,last_name,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN (</span><br><span class="line">	SELECT DISTINCT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE last_name LIKE&#39;%u%&#39;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#5·查询在部门的location-id为1700的部门工作的员工的员工号</span><br><span class="line">SELECT employee_id,department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id IN(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM departments</span><br><span class="line">	WHERE location_id&#x3D;1700</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#6·查询管理者是Ring的员工姓名和工资</span><br><span class="line">#直接用自连接</span><br><span class="line">SELECT e.last_name,e.salary</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN employees AS m</span><br><span class="line">ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;</span><br><span class="line">WHERE m.&#96;last_name&#96;&#x3D;&#39;K_ing&#39;;</span><br><span class="line">#或者用子查询：</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id&#x3D;(</span><br><span class="line">	SELECT employee_id</span><br><span class="line">	FROM employees</span><br><span class="line">	WHERE last_name&#x3D;&#39;K_ing&#39;</span><br><span class="line">	AND manager_id IS NULL</span><br><span class="line">);</span><br><span class="line">#或者先用子查询生成领导表：</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE manager_id IN(</span><br><span class="line">	SELECT m.id</span><br><span class="line">	FROM(</span><br><span class="line">		SELECT employee_id AS id,last_name</span><br><span class="line">		FROM employees</span><br><span class="line">		WHERE employee_id IN(</span><br><span class="line">			SELECT DISTINCT manager_id</span><br><span class="line">			FROM employees</span><br><span class="line">		)</span><br><span class="line">	) AS m</span><br><span class="line">	WHERE m.last_name&#x3D;&#39;K_ing&#39;</span><br><span class="line">);</span><br><span class="line">#7·查询工资最高的员工的姓名，要求first-name和last-name显示为一列，列名为姓.名</span><br><span class="line">SELECT CONCAT(first_name,&#39;.&#39;,last_name) AS &quot;姓.名&quot;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&#x3D;(</span><br><span class="line">	SELECT MAX(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#子查询经典案例</span><br><span class="line"></span><br><span class="line">#1.查询工资最低的员工：last_name，salary</span><br><span class="line">SELECT last_name,salary</span><br><span class="line">FROM employees</span><br><span class="line">WHERE salary&#x3D;(</span><br><span class="line">	SELECT MIN(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.查询平均工资最低的部门信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id&#x3D;(</span><br><span class="line">	SELECT ag_dep.department_id </span><br><span class="line">	FROM(</span><br><span class="line">		SELECT AVG(salary) AS ag_sal,department_id </span><br><span class="line">		FROM employees</span><br><span class="line">		GROUP BY department_id</span><br><span class="line">	) AS ag_dep</span><br><span class="line">	WHERE ag_dep.ag_sal&#x3D;(</span><br><span class="line">		SELECT MIN(ag_dep.ag_sal)</span><br><span class="line">		FROM(</span><br><span class="line">			SELECT AVG(salary) AS ag_sal,department_id </span><br><span class="line">			FROM employees</span><br><span class="line">			GROUP BY department_id</span><br><span class="line">		) AS ag_dep</span><br><span class="line">	)</span><br><span class="line">);</span><br><span class="line">#或者：</span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id&#x3D;(</span><br><span class="line">	SELECT department_id </span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	WHERE AVG(salary)&#x3D;(</span><br><span class="line">		SELECT MIN(ag_dep.ag_sal)</span><br><span class="line">		FROM(</span><br><span class="line">			SELECT AVG(salary) AS ag_sal,department_id </span><br><span class="line">			FROM employees</span><br><span class="line">			GROUP BY department_id</span><br><span class="line">		) AS ag_dep</span><br><span class="line">	)</span><br><span class="line">);</span><br><span class="line">#或者用order by+limit：</span><br><span class="line">SELECT *</span><br><span class="line">FROM departments</span><br><span class="line">WHERE department_id&#x3D;(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY AVG(salary) ASC</span><br><span class="line">	LIMIT 1</span><br><span class="line">);</span><br><span class="line">#PS:用min函数需要比对两次分组后表的信息，但用order by+limit就只需要一次分组，通过排序获取最小值</span><br><span class="line"></span><br><span class="line">#3.查询平均工资最低的部门信息和该部门的平均工资</span><br><span class="line">#用连接查询+表子查询</span><br><span class="line">SELECT d.*,ag_dep.ag_sal</span><br><span class="line">FROM departments AS d</span><br><span class="line">INNER JOIN (</span><br><span class="line">	SELECT AVG(salary) AS ag_sal,department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY AVG(salary) ASC</span><br><span class="line">	LIMIT 0,1</span><br><span class="line">) AS ag_dep</span><br><span class="line">ON d.&#96;department_id&#96;&#x3D;ag_dep.department_id;</span><br><span class="line"></span><br><span class="line">#4.查询平均工资最高的job信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM jobs</span><br><span class="line">WHERE job_id&#x3D;(</span><br><span class="line">	SELECT job_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY job_id</span><br><span class="line">	ORDER BY AVG(salary) DESC</span><br><span class="line">	LIMIT 1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#5，查询平均工资高于公司平均工资的部门有哪些？</span><br><span class="line">SELECT AVG(salary)</span><br><span class="line">FROM employees;</span><br><span class="line"></span><br><span class="line">SELECT department_id,AVG(salary)</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">HAVING AVG(salary)&gt;(</span><br><span class="line">	SELECT AVG(salary)</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#6.查询出公司中所有manager的详细信息.</span><br><span class="line">#用自连接生成manager_id列表</span><br><span class="line">SELECT m.&#96;employee_id&#96;</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN employees AS m</span><br><span class="line">ON e.&#96;manager_id&#96;&#x3D;m.&#96;employee_id&#96;;</span><br><span class="line">#或者直接查manager_id然后去重</span><br><span class="line">SELECT DISTINCT manager_id</span><br><span class="line">FROM employees;</span><br><span class="line">#然后用子查询</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id IN(</span><br><span class="line">	SELECT DISTINCT manager_id</span><br><span class="line">	FROM employees</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#7.各个部门中最高工资中最低的那个部门的最低工资是多少</span><br><span class="line">#先找出目标部门id</span><br><span class="line">SELECT department_id</span><br><span class="line">FROM employees</span><br><span class="line">GROUP BY department_id</span><br><span class="line">ORDER BY MAX(salary) ASC #执行顺序在group by之后的，都可以使用分组函数</span><br><span class="line">LIMIT 1;</span><br><span class="line">#然后筛选出来，既然已经筛选出特定部门了，就不需要额外分组了，再直接用分组函数min即可</span><br><span class="line">SELECT MIN(salary),department_id</span><br><span class="line">FROM employees</span><br><span class="line">WHERE department_id&#x3D;(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY MAX(salary) ASC</span><br><span class="line">	LIMIT 1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#8.查询平均工资最高的部门的manager的详细信息：last_name，department_id，email，salary</span><br><span class="line">#用两次子查询</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id&#x3D;(</span><br><span class="line">		SELECT manager_id</span><br><span class="line">		FROM departments</span><br><span class="line">		WHERE department_id&#x3D;(</span><br><span class="line">			SELECT department_id</span><br><span class="line">			FROM employees</span><br><span class="line">			GROUP BY department_id</span><br><span class="line">			ORDER BY AVG(salary) DESC</span><br><span class="line">			LIMIT 1</span><br><span class="line">		)</span><br><span class="line">);</span><br><span class="line">#或者用内连接+子查询</span><br><span class="line">SELECT*</span><br><span class="line">FROM employees AS e</span><br><span class="line">INNER JOIN departments AS d</span><br><span class="line">ON d.&#96;manager_id&#96;&#x3D;e.&#96;employee_id&#96;</span><br><span class="line">WHERE d.department_id&#x3D;(</span><br><span class="line">	SELECT department_id</span><br><span class="line">	FROM employees</span><br><span class="line">	GROUP BY department_id</span><br><span class="line">	ORDER BY AVG(salary) DESC</span><br><span class="line">	LIMIT 1</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#PS：不只是select和having,group by 、order by后面也支持单行函数</span><br></pre></td></tr></table></figure>



<h6 id="8-分页查询："><a href="#8-分页查询：" class="headerlink" title="8.分页查询："></a>8.分页查询：</h6><p>应用场景：当要显示的数据，一页显示不全时，需要分页提交SQL请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	select 查询列表</span><br><span class="line">	from 表名1</span><br><span class="line">	【type join 表名2 on 连接条件】</span><br><span class="line">	【where 筛选条件】</span><br><span class="line">	【group by 分组字段】</span><br><span class="line">	【having 分组后的筛选】</span><br><span class="line">	【order by 排序字段】</span><br><span class="line">	limit 【offset,】size;</span><br><span class="line">offset	:要显示条目的起始索引（从0开始），默认值是0</span><br><span class="line">size	:要显示的条目个数</span><br><span class="line">执行顺序：from&gt;join&gt;on&gt;where&gt;group by&gt;having&gt;select&gt;order by&gt;limit</span><br><span class="line"></span><br><span class="line">特点：</span><br><span class="line">	1.limit语句放在查询语句的末尾</span><br><span class="line">	2.公式：要显示的页数page,每页的条目数size</span><br><span class="line">		select 查询列表</span><br><span class="line">		from 表名</span><br><span class="line">		limit (page-1)*size,size</span><br><span class="line">			</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例1：查询前5条员工信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">LIMIT 0,5;</span><br><span class="line">#或者：</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">LIMIT 5;</span><br><span class="line"></span><br><span class="line">#案例2：查询第11条-第25条</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">LIMIT 10,15;</span><br><span class="line"></span><br><span class="line">#案例3：有奖金且工资较高的前10名的员工信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE commission_pct IS NOT NULL</span><br><span class="line">ORDER BY salary DESC</span><br><span class="line">LIMIT 10;</span><br></pre></td></tr></table></figure>

<h6 id="9-联合查询："><a href="#9-联合查询：" class="headerlink" title="9.联合查询："></a>9.联合查询：</h6><p>含义：</p>
<p>union 联合 合并：将多条查询语句的结果合并为一个结果（列数相同，把行连在一起）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	查询语句1</span><br><span class="line">	union</span><br><span class="line">	查询语句2</span><br><span class="line">	union</span><br><span class="line">	查询语句3</span><br><span class="line">	union</span><br><span class="line">	...</span><br><span class="line">应用场景：</span><br><span class="line">	1.查询的信息来自多个表，但表与表之间没有直接的连接关系，而查询的信息含义是一致的。</span><br><span class="line">	2.将一条比较复杂的查询语句拆分成多条语句</span><br><span class="line">注意事项：</span><br><span class="line">	1.要求多条查询语句的结果列数是一致的</span><br><span class="line">	2.要求多条查询语句的字段类型与顺序一致（默认与第一条查询语句一致）</span><br><span class="line">	3.union会自动去重，采用union all关键字会包含重复项（行）</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#引入案例：查询部门编号&gt;90或者邮箱包含a的员工信息</span><br><span class="line">SELECT *</span><br><span class="line">FROM employees</span><br><span class="line">WHERE email LIKE &#39;%a%&#39; OR department_id&gt;90;</span><br><span class="line"></span><br><span class="line">SELECT * FROM employees WHERE email LIKE&#39;%a%&#39;</span><br><span class="line">UNION</span><br><span class="line">SELECT * FROM employees WHERE department_id&gt;90;</span><br></pre></td></tr></table></figure>



<hr>
<h5 id="DML学习（数据操作语言）"><a href="#DML学习（数据操作语言）" class="headerlink" title="DML学习（数据操作语言）"></a>DML学习（数据操作语言）</h5><p>插入：insert</p>
<p>修改：update</p>
<p>删除：delete</p>
<h6 id="1-插入语句："><a href="#1-插入语句：" class="headerlink" title="1.插入语句："></a>1.插入语句：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式1：经典插入方法</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	insert into 表名(列名1,...) value(值1,...);</span><br><span class="line">ps:表明或者value与后面的括号之间加不加空格均可，习惯上不加</span><br><span class="line">*&#x2F;</span><br><span class="line">#1.插入的值的类型要与列（字段）的类型一致或兼容</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUE(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2);</span><br><span class="line"></span><br><span class="line">#2.不可以为null的列必须插入值，可以为null的列这样插入值：</span><br><span class="line">#方式1：指出列名，但插入的值为null</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone,photo,boyfriend_id)</span><br><span class="line">VALUE(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2);</span><br><span class="line"></span><br><span class="line">#方式2：直接不指出列名，也不指出值</span><br><span class="line">INSERT INTO beauty(id,NAME,sex,borndate,phone)</span><br><span class="line">VALUE(14,&#39;金星&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18668686868&#39;);</span><br><span class="line"></span><br><span class="line">#3.列的顺序可以调换</span><br><span class="line">INSERT INTO beauty(phone,id,NAME)</span><br><span class="line">VALUE(&#39;110&#39;,15,&#39;蒋欣&#39;);</span><br><span class="line"></span><br><span class="line">#4.列和值的个数必须一致，否则报错</span><br><span class="line"></span><br><span class="line">#5.可以省略列名（字段）列表，这会默认插入所有列，顺序与表中一致</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUE(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2);</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式2：</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	insert into 表名</span><br><span class="line">	set 列名1&#x3D;值1,列名2&#x3D;值2,...</span><br><span class="line">*&#x2F;</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">SET id&#x3D;16,NAME&#x3D;&#39;刘涛&#39;,phone&#x3D;&#39;999&#39;;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#两种插入方式的比较</span><br><span class="line"></span><br><span class="line">#1.方式1支持一次插入多行，方式2不支持</span><br><span class="line">INSERT INTO beauty</span><br><span class="line">VALUE(13,&#39;唐昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2)，</span><br><span class="line">(13,&#39;唐艺昕&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2)，</span><br><span class="line">(13,&#39;唐艺&#39;,&#39;女&#39;,&#39;1990-4-23&#39;,&#39;18968686868&#39;,NULL,2);</span><br><span class="line">#ps:一次插入多行时，若有一行插入失败，整个语句的所有行插入均失败。</span><br><span class="line"></span><br><span class="line">#2.方式1支持子查询，方式2不支持</span><br><span class="line">INSERT INTO beauty(id,NAME,phone)</span><br><span class="line">SELECT 26,&#39;宋茜&#39;,&#39;11809866&#39;;</span><br><span class="line">#这时value关键字也不需要了，直接使用子查询的结果插入值</span><br><span class="line"></span><br><span class="line">#ps:查询语句如果在select后追加常量，会在结果表的每一行都追加相同的常量</span><br><span class="line">SELECT employee_id,last_name,&#39;啥&#39;</span><br><span class="line">FROM employees</span><br><span class="line">WHERE employee_id BETWEEN 100 AND 105;</span><br></pre></td></tr></table></figure>

<h6 id="2-修改语句："><a href="#2-修改语句：" class="headerlink" title="2.修改语句："></a>2.修改语句：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">1.修改单表的记录</span><br><span class="line">语法：</span><br><span class="line">	update 表名</span><br><span class="line">	set 列1&#x3D;新值1,列2&#x3D;新值2,...</span><br><span class="line">	where 筛选条件;</span><br><span class="line">执行顺序：update&gt;where&gt;set</span><br><span class="line"></span><br><span class="line">2.修改多表的记录【补充】</span><br><span class="line">语法：</span><br><span class="line">sql92语法：</span><br><span class="line">	update 表1 别名1,表2 别名2,...</span><br><span class="line">	set 列&#x3D;值,...</span><br><span class="line">	where 连接条件</span><br><span class="line">	and 筛选条件;</span><br><span class="line">sql99语法：</span><br><span class="line">	update 表1 别名1</span><br><span class="line">	inner|left|right join 表2 别名2</span><br><span class="line">	on 连接条件1</span><br><span class="line">	...</span><br><span class="line">	set 列&#x3D;值,...</span><br><span class="line">	where 筛选条件</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1.修改单表的记录</span><br><span class="line"></span><br><span class="line">#案例1:修改beauty表中姓&#39;唐&#39;的女神电话为13856567878</span><br><span class="line">UPDATE beauty</span><br><span class="line">SET phone&#x3D;&#39;13856567878&#39;</span><br><span class="line">WHERE NAME LIKE &#39;唐%&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：修改boys表中的id为2的男神姓名为&#39;张飞&#39;,usercp为10</span><br><span class="line">UPDATE boys</span><br><span class="line">SET boyName&#x3D;&#39;张飞&#39;,userCP&#x3D;10</span><br><span class="line">WHERE id&#x3D;2;</span><br><span class="line"></span><br><span class="line">#2.修改多表的记录</span><br><span class="line"></span><br><span class="line">#案例1：修改张无忌的女朋友手机号为114</span><br><span class="line">UPDATE beauty AS b</span><br><span class="line">INNER JOIN boys AS bo</span><br><span class="line">ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">SET b.&#96;phone&#96;&#x3D;&#39;114&#39;</span><br><span class="line">WHERE bo.&#96;boyName&#96;&#x3D;&#39;张无忌&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：修改没有男朋友的女神的男朋友为‘张飞’</span><br><span class="line">UPDATE beauty AS b</span><br><span class="line">LEFT JOIN boys AS bo</span><br><span class="line">ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">SET b.&#96;boyfriend_id&#96;&#x3D;(</span><br><span class="line">	SELECT id</span><br><span class="line">	FROM boys</span><br><span class="line">	WHERE boyName&#x3D;&#39;张飞&#39;</span><br><span class="line">)</span><br><span class="line">WHERE bo.&#96;id&#96; IS NULL;</span><br></pre></td></tr></table></figure>

<h6 id="3-删除语句："><a href="#3-删除语句：" class="headerlink" title="3.删除语句："></a>3.删除语句：</h6><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#方式1：delete</span><br><span class="line">&#x2F;*</span><br><span class="line">语法:</span><br><span class="line">1.单表的删除</span><br><span class="line">	delete from 表名 【where 筛选条件】【limit 条目数】;</span><br><span class="line">2.多表的删除【补充】</span><br><span class="line">语法：</span><br><span class="line">sql92:</span><br><span class="line">	delete 表1的别名|表2的别名 （决定到底删除哪个表的记录）</span><br><span class="line">	from 表1 别名1,表2 别名2</span><br><span class="line">	where 连接条件</span><br><span class="line">	【and 筛选条件】</span><br><span class="line">	【limit 条目数】;</span><br><span class="line">sql99:</span><br><span class="line">	delete 表1的别名|表2的别名 （决定到底删除哪个表的记录）</span><br><span class="line">	from 表1 别名1</span><br><span class="line">	inner|left|right join 表2 别名2</span><br><span class="line">	on 连接条件</span><br><span class="line">	【where 筛选条件】</span><br><span class="line">	【limit 条目数】;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#方式2：truncate</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	truncate table 表名;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#方式比较（经典面试题）：</span><br><span class="line">&#x2F;*</span><br><span class="line">1.delete可以加where条件，truncate不能加，相当于清空表</span><br><span class="line">2.truncate删除，效率高一丢丢</span><br><span class="line">3.假如要删除的表中有自增长列，</span><br><span class="line">	如果用delete删除后，再插入数据，自增长列的值从断点开始，</span><br><span class="line">	而truncate删除后，再插入数据，自增长列的值从1开始。</span><br><span class="line">4.truncate删除没有返回值，而delete删除有返回值（返回共几行受影响）</span><br><span class="line">5.truncate删除不能回滚，delete删除可以回滚。</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#****************************************</span><br><span class="line">#方式1：delete</span><br><span class="line">#1.单表的删除</span><br><span class="line">#案例1：删除手机号码以9结尾的女神信息</span><br><span class="line">DELETE FROM beauty WHERE phone LIKE &#39;%9&#39;;</span><br><span class="line"></span><br><span class="line">#2.多表的删除</span><br><span class="line">#案例1:删除张无忌女朋友的信息</span><br><span class="line">DELETE b</span><br><span class="line">FROM boys AS bo</span><br><span class="line">INNER JOIN beauty AS b</span><br><span class="line">ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;</span><br><span class="line">WHERE boyName&#x3D;&#39;张无忌&#39;;</span><br><span class="line"></span><br><span class="line">#案例2：删除黄晓明和他女朋友的信息</span><br><span class="line">DELETE b,bo</span><br><span class="line">FROM boys AS bo</span><br><span class="line">INNER JOIN beauty AS b</span><br><span class="line">ON b.&#96;boyfriend_id&#96;&#x3D;bo.&#96;id&#96;&#96;boys&#96;</span><br><span class="line">WHERE boyName&#x3D;&#39;黄晓明&#39;;</span><br><span class="line"></span><br><span class="line">#****************************************</span><br><span class="line">#方式2：truncate</span><br><span class="line">#案例：将usercp&gt;100的男神信息删除</span><br><span class="line">TRUNCATE TABLE boys;#不能加where子句，只能清空表</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#练习</span><br><span class="line"></span><br><span class="line">#1.创建空表</span><br><span class="line">USE myemployees;</span><br><span class="line">CREATE TABLE my_employees(</span><br><span class="line">	id INT(10),</span><br><span class="line">	First_name VARCHAR(10),</span><br><span class="line">	Last_name VARCHAR(10),</span><br><span class="line">	Userid VARCHAR(10),</span><br><span class="line">	Salary DOUBLE(10,2)</span><br><span class="line">);</span><br><span class="line">CREATE TABLE users(</span><br><span class="line">	id INT,</span><br><span class="line">	userid VARCHAR(10),</span><br><span class="line">	department_id INT</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.查看表结构</span><br><span class="line">DESC my_employees;</span><br><span class="line"></span><br><span class="line">#3.向my_employees插入数据</span><br><span class="line">#插入方式1：省略字段名直接多行插入</span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">VALUE(1,&#39;patel&#39;,&#39;Ralph&#39;,&#39;Rpatel&#39;,895),</span><br><span class="line">(2,&#39;Dancs&#39;,&#39;Betty&#39;,&#39;Bdancs&#39;,860),</span><br><span class="line">(3,&#39;Biri&#39;,&#39;Ben&#39;,&#39;Bbiri&#39;,1100),</span><br><span class="line">(4,&#39;Newman&#39;,&#39;Chad&#39;,&#39;Cnewman&#39;,750),</span><br><span class="line">(5,&#39;Ropeburn&#39;,&#39;Audrey&#39;,&#39;Aropebur&#39;,1550);</span><br><span class="line">#插入方式2：子查询+联合查询实现多行插入</span><br><span class="line">INSERT INTO my_employees</span><br><span class="line">SELECT 1,&#39;patel&#39;,&#39;Ralph&#39;,&#39;Rpatel&#39;,895 UNION</span><br><span class="line">SELECT 2,&#39;Dancs&#39;,&#39;Betty&#39;,&#39;Bdancs&#39;,860 UNION</span><br><span class="line">SELECT 3,&#39;Biri&#39;,&#39;Ben&#39;,&#39;Bbiri&#39;,1100 UNION</span><br><span class="line">SELECT 4,&#39;Newman&#39;,&#39;Chad&#39;,&#39;Cnewman&#39;,750 UNION</span><br><span class="line">SELECT 5,&#39;Ropeburn&#39;,&#39;Audrey&#39;,&#39;Aropebur&#39;,1550;</span><br><span class="line"></span><br><span class="line">#4.向users插入数据</span><br><span class="line">INSERT INTO users</span><br><span class="line">VALUE(1,&#39;Rpatel&#39;,10),</span><br><span class="line">(2,&#39;Bdancs&#39;,10),</span><br><span class="line">(3,&#39;Bbiri&#39;,20),</span><br><span class="line">(4,&#39;Cnewman&#39;,30),</span><br><span class="line">(5,&#39;Aropebur&#39;,40);</span><br><span class="line"></span><br><span class="line">#5.将3号员工的Last_name修改为&quot;drelxer&quot;</span><br><span class="line">UPDATE my_employees</span><br><span class="line">SET Last_name&#x3D;&#39;Drelxer&#39;</span><br><span class="line">WHERE id&#x3D;3;</span><br><span class="line"></span><br><span class="line">#6.将所有工资少于900的员工的工资修改为1000</span><br><span class="line">UPDATE my_employees</span><br><span class="line">SET Salary&#x3D;1000</span><br><span class="line">WHERE Salary&lt;900;</span><br><span class="line"></span><br><span class="line">#7.将userid为Bbiri的user表和my_employees表的记录全部删除</span><br><span class="line">DELETE u,m</span><br><span class="line">FROM users AS u</span><br><span class="line">INNER JOIN my_employees AS m</span><br><span class="line">ON u.&#96;id&#96;&#x3D;m.&#96;Userid&#96;</span><br><span class="line">WHERE u.&#96;id&#96;&#x3D;&#39;Bbiri&#39;;</span><br><span class="line"></span><br><span class="line">#8.删除所有数据</span><br><span class="line">#delete不加筛选条件</span><br><span class="line">DELETE FROM my_employees;</span><br><span class="line">DELETE FROM users;</span><br><span class="line">#或者直接清空</span><br><span class="line">TRUNCATE TABLE my_employees;</span><br><span class="line">TRUNCATE TABLE users;</span><br></pre></td></tr></table></figure>

<hr>
<h5 id="DDL学习（数据定义语言）"><a href="#DDL学习（数据定义语言）" class="headerlink" title="DDL学习（数据定义语言）"></a>DDL学习（数据定义语言）</h5><p>负责对库和表的管理</p>
<p>一、库的管理：创建(creat)、修改(alter)、删除(drop)</p>
<p>二、表的管理：创建(creat)、修改(alter)、删除(drop)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#一、库的管理</span><br><span class="line"></span><br><span class="line">#1.库的创建</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	create database 【IF NOT EXISTS】 库名;</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例：创建库Books</span><br><span class="line">CREATE DATABASE books;</span><br><span class="line">#或者为了增加容错性，加一个判断</span><br><span class="line">CREATE DATABASE IF NOT EXISTS books;</span><br><span class="line"></span><br><span class="line">#2.库的修改（基本不改）</span><br><span class="line">#库名更改语句已经弃用</span><br><span class="line">#直接在文件夹处更改库名（ProgramData\...）</span><br><span class="line">#可以更改库的字符集</span><br><span class="line">ALTER DATABASE books CHARACTER SET gbk;</span><br><span class="line"></span><br><span class="line">#3.库的删除</span><br><span class="line">#语法：</span><br><span class="line">drop database 【if exists】 库名;</span><br><span class="line">#案例：删除books库</span><br><span class="line">DROP DATABASE books;</span><br><span class="line">#或者：</span><br><span class="line">DROP DATABASE IF EXISTS books;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#二、表的管理</span><br><span class="line"></span><br><span class="line">#1.表的创建</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	creat table 【if not exists】表名（</span><br><span class="line">		列名1 列的类型【长度、约束】,</span><br><span class="line">		列名2 列的类型【长度、约束】,</span><br><span class="line">		列名3 列的类型【长度、约束】,</span><br><span class="line">		...</span><br><span class="line">		列名n 列的类型【长度、约束】</span><br><span class="line">	）</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#案例：创建表book和author</span><br><span class="line">CREATE TABLE book(</span><br><span class="line">	id INT,#编号</span><br><span class="line">	bName VARCHAR(20),</span><br><span class="line">	price DOUBLE,</span><br><span class="line">	authorId INT,</span><br><span class="line">	publishDate DATETIME</span><br><span class="line">	</span><br><span class="line">);</span><br><span class="line">CREATE TABLE author(</span><br><span class="line">	id INT,</span><br><span class="line">	au_name VARCHAR(20),</span><br><span class="line">	nation VARBINARY(10)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#2.表的修改</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">	alter table 表名 </span><br><span class="line">	change|modify|add|drop column 列名 【类型、约束】</span><br><span class="line">*&#x2F;</span><br><span class="line">#1)修改列名</span><br><span class="line">alter table book </span><br><span class="line">change 【column】 旧列名 新列名 新列类型;</span><br><span class="line">#例如：</span><br><span class="line">ALTER TABLE book CHANGE COLUMN publishdate pubDate DATETIME【新约束】;</span><br><span class="line"></span><br><span class="line">#2)修改列的类型或约束</span><br><span class="line">ALTER TABLE book MODIFY COLUMN pubdate TIMESTAMP【新约束】;</span><br><span class="line"></span><br><span class="line">#3)添加新列</span><br><span class="line">ALTER TABLE book ADD COLUMN annual DOUBLE【first|after 列名】;#可以选择添加列的位置</span><br><span class="line"></span><br><span class="line">#4)删除列</span><br><span class="line">ALTER TABLE book DROP COLUMN annual;</span><br><span class="line">#ps:当表中仅有一列时，删除列命令不可用，应直接使用删除表命令。</span><br><span class="line"></span><br><span class="line">#5)修改表名</span><br><span class="line">ALTER TABLE author RENAME 【TO】 book_author;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#3.表的删除</span><br><span class="line">drop table 【if exists】 book_author;</span><br><span class="line">SHOW TABLES;</span><br><span class="line">#ps:创建新库|表的通用写法：先删除再创建</span><br><span class="line">drop database if exists 新库名;</span><br><span class="line">creat database 新库名;</span><br><span class="line"></span><br><span class="line">drop table if exists 新表名;</span><br><span class="line">creat table 新表名;</span><br><span class="line"></span><br><span class="line">#4.表的复制</span><br><span class="line">#1)仅仅复制表的结构</span><br><span class="line">CREATE TABLE copy LIKE author;</span><br><span class="line"></span><br><span class="line">#2)复制表的结构+数据</span><br><span class="line">CREATE TABLE copy2 SELECT * FROM author;#完全复制</span><br><span class="line"></span><br><span class="line">CREATE TABLE copy3 #部分复制</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author</span><br><span class="line">WHERE nation&#x3D;&#39;中国&#39;;</span><br><span class="line"></span><br><span class="line">#仅仅复制某些字段，不要数据，只要加一个恒不成立的条件即可，比如1&#x3D;2，0</span><br><span class="line">CREATE TABLE copy4</span><br><span class="line">SELECT id,au_name</span><br><span class="line">FROM author</span><br><span class="line">WHERE 0; #只要转为的布尔值总为false就认为是恒不成立的条件</span><br></pre></td></tr></table></figure>

<p>PS：可以跨库查询，在from子句中，表名前面用”库名.”修饰即可。</p>
<p><strong>常见数据类型介绍：</strong></p>
<p>数值型：</p>
<p>​                整型：tinyint(1Byte)、samllint(2)、mediumint(3)、int/integer(4)、bigint(8)</p>
<p>​                小数：</p>
<p>​                            浮点型：float(M,D),double(M,D)</p>
<p>​                            定点型：dec(M,D)或者decimal(M,D)</p>
<p>字符型：</p>
<p>​                            短文本：char(M)、varchar(M)</p>
<p>​                            长文本：text、blob(较大的二进制数据)</p>
<p>​                            二进制：binary、varbinary,保存较短的二进制数据</p>
<p>​                            枚举：enum(‘a’,’b’,’c’)，适合短文本</p>
<p>​                            集合：set(‘a’,’b’,’c’)，适合短文本</p>
<p>日期型：datetime、timestamp、date、time、year</p>
<p><strong>数据类型特点总结:</strong></p>
<p><em>整型：</em></p>
<p>​        1.默认有符号，类型名后缀unsigned可以设置为无符号</p>
<p>​        2.如果插入的数值超出了整型的范围，会报out of range异常，并且插入临界值</p>
<p>​        3.类型后括号中的长度表示数值显示的最大宽度（位数），都有默认长度，配合zerofill关键字可以填充空位，同时默认变为无符号整型。</p>
<p><em>小数：</em></p>
<p>​        1.M代表整数和小数的显示的总位数，D代表小数位数，如果超过这个范围，则插入临界值（小数点位数超过会四舍五入，整数位超过会设为类似999.99的最大值）</p>
<p>​        2.M，D都可以省略，如果是decimal，则M默认为10，D默认为0；如果是float和double，则会根据插入的数值的精度来决定精度</p>
<p>​        3.定点型的精确度较高，如果要求插入数值的精度较高，如货币运算等则考虑使用</p>
<p><em>字符型：</em></p>
<p>​        M代表字符数上限，char存储固定长度的字符，varchar存储可变长度的字符；</p>
<p>​        char比较耗费空间但效率较高，varchar比较省空间，但效率较低一些；</p>
<p>​        char的M可以省略，默认为1，varchar的M不能省略。</p>
<p>​        枚举型不区分大小写，但如果超出枚举范围，不能插入数据。</p>
<p>​        集合有点类似枚举，也是指定了一个范围，但是可以一次插入多个元素：value(‘a,b,c’)，中间用逗号分隔，元素的大小写和顺序都不重要，插入后，无论是顺序还是大小写，都是按定义set时的样子排布的。</p>
<p><em>日期型：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">分类与特点总结：</span><br><span class="line">date 只保存日期</span><br><span class="line">time 只保存时间</span><br><span class="line">year 只保存年份</span><br><span class="line">datetime 保存日期+时间（8Byte,与时区无关，范围较大:1000-9999年）</span><br><span class="line">timestamp 保存日期+时间（4Byte,与时区相关，范围较小:1970-2038年）</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#显示时区</span><br><span class="line">SHOW VARIABLES LIKE &#39;time_zone&#39;;</span><br><span class="line">#设置时区为东9区</span><br><span class="line">SET time_zone&#x3D;&#39;+9:00&#39;;</span><br></pre></td></tr></table></figure>



<p><strong>数据类型选择原则：</strong></p>
<p>所选择的类型越简单越好，能保存数值的类型占用的字节数越小越好。</p>
<p><strong>PS:    <em>value与values的区别：</em></strong></p>
<p>​        都是正确的，可以混合使用，但两者对不同插入数量的执行效率不同，多行插入时，value执行效率较高，单行插入时，values执行效率较高？貌似还是value效率较高。总体来说，多行插入要比单行插入效率高很多，用value要比用values效率高一些。</p>
<p><strong>常见约束：</strong></p>
<p><em>含义</em>：用于限制表中的数据，这是为了保证表中数据的准确性和可靠性</p>
<p><em>分类</em>：六大约束</p>
<p>​            not null:非空，用于保证该字段的值不能为空</p>
<p>​            default:默认,用于保证该字段有默认值，如性别</p>
<p>​            primary key:主键，用于保证该字段的值具有唯一性，并且非空，如学号</p>
<p>​            unique:唯一，用于保证该字段的值具有唯一性，可以为空，如座位号</p>
<p>​            check:检查约束【MySQL中不支持，但不会报错】，如性别</p>
<p>​            foreign key:外键，用于限制两个表的关系，保证该字段的值必须来自于主表的关联列的值，在从表添加外键约束，用于引用主表中某列的值。比如员工表的部门编号、工种编号。</p>
<p>ps:多个约束可以同时加在同一个字段上。</p>
<p><em>添加约束的时机：</em></p>
<p>​            1.创建表时</p>
<p>​            2.修改表时</p>
<p><em>约束的添加分类：</em></p>
<p>​            列级约束：六大约束语法上都支持，但外键约束没有实际效果</p>
<p>​            表级约束：除了非空、默认，其他的都支持</p>
<p><em>主键与唯一的比较：</em></p>
<p>​            1.都能保证唯一性，主键不允许为空，而唯一允许为空，但最多有一个为空，否则认为是重复</p>
<p>​            2.一个表中可以有多个唯一约束，但只能有一个主键约束</p>
<p>​            3.都允许组合，所谓组合就是组合多个列作为主键或唯一键（多个字段组合接受主键约束或唯一约束），但是不推荐使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#语法</span><br><span class="line">creat table 表名(</span><br><span class="line">	字段名 字段类型 列级约束,</span><br><span class="line">    字段名 字段类型,</span><br><span class="line">    表级约束</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">#一、创建表时添加约束</span><br><span class="line">#1.添加列级约束</span><br><span class="line">#语法：直接在字段名和类型后面追加约束类型即可。</span><br><span class="line">#只支持：默认、非空、主键、唯一</span><br><span class="line">CREATE TABLE stuinfo( </span><br><span class="line">	id INT PRIMARY KEY, #主键</span><br><span class="line">	stuName VARCHAR(20) NOT NULL,#非空 </span><br><span class="line">	gender CHAR(1) CHECK(gender&#x3D;&#39;男&#39; OR gender&#x3D;&#39;女&#39;),#无效 </span><br><span class="line">	seat INT UNIQUE, age INT DEFAULT 18, #默认</span><br><span class="line">	majorId INT REFERENCES major(id) #无效</span><br><span class="line">); </span><br><span class="line">CREATE TABLE major( </span><br><span class="line">	id INT PRIMARY KEY, </span><br><span class="line">	majorName VARCHAR(20) NOT NULL </span><br><span class="line">); </span><br><span class="line">#ps:查看表的索引信息:&quot;唯一键&quot;</span><br><span class="line">SHOW INDEX FROM stuinfo;</span><br><span class="line"></span><br><span class="line">#2.添加表级约束</span><br><span class="line">#语法：在各个字段的最下面列出：</span><br><span class="line">【constraint 约束名（or键名）】 约束类型(字段名),...</span><br><span class="line">#ps:如果不给约束（或者说键）起名字，默认为字段名，但主键无论如何都叫PRIMARY</span><br><span class="line"></span><br><span class="line">CREATE TABLE stuinfo( </span><br><span class="line">	id INT,</span><br><span class="line">	stuname VARCHAR(20),</span><br><span class="line">	gender CHAR(1), </span><br><span class="line">	seat INT, </span><br><span class="line">	majorId INT,</span><br><span class="line">	</span><br><span class="line">	CONSTRAINT pk PRIMARY KEY(id),#主键</span><br><span class="line">	CONSTRAINT uq UNIQUE(seat),#唯一</span><br><span class="line">    #检查【无效！】</span><br><span class="line">	CONSTRAINT ck CHECK(gender&#x3D;&#39;男&#39; OR gender&#x3D;&#39;女&#39;),</span><br><span class="line">	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id) #外键</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line">#通用的写法：为了方便，一般的约束就写成列级约束，外键约束写为表级约束</span><br><span class="line">CREATE TABLE IF NOT EXISTS stuinfo( </span><br><span class="line">	id INT PRIMARY KEY,</span><br><span class="line">	stuname VARCHAR(20) NOT NULL,</span><br><span class="line">	gender CHAR(1), </span><br><span class="line">	age INT DEFAULT 18,</span><br><span class="line">	seat INT UNIQUE,</span><br><span class="line">	majorId INT,</span><br><span class="line"></span><br><span class="line">	CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id) #外键</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><em>关于外键的几个特点：</em></p>
<p>​            1.要求在从表设置外键关系</p>
<p>​            2.从表的外键列的类型和主表的关联列的类型要求一致或兼容，名称无要求</p>
<p>​            3.主表的关联列必须是一个key（一般是主键或唯一）</p>
<p>​            4.插入数据时，先插入主表，再插入从表，</p>
<p>​            删除数据时，先删除从表，再删除主表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#二、修改表时添加约束</span><br><span class="line">&#x2F;*</span><br><span class="line">语法：</span><br><span class="line">1.添加列级约束</span><br><span class="line">alter table 表名 modify column 字段名 字段类型 约束类型;</span><br><span class="line">2.添加表级约束</span><br><span class="line">alter table 表名 add 【constraint 约束名（or键名）】约束类型(字段名);</span><br><span class="line">对于外键：</span><br><span class="line">alter table 表名 add constraint 约束名 约束类型(字段名) REFERENCES 主表名(关联字段名);</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#1.添加非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NOT NULL;</span><br><span class="line">#2.添加默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT DEFAULT 18;</span><br><span class="line">#3.添加主键</span><br><span class="line">#以列级约束的方式添加</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN id INT PRIMARY KEY;</span><br><span class="line">#以表级约束的方式添加</span><br><span class="line">ALTER TABLE stuinfo ADD PRIMARY KEY(id);</span><br><span class="line">#4.添加唯一约束</span><br><span class="line">#以列级约束的方式添加</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN seat INT UNIQUE;</span><br><span class="line">#以表级约束的方式添加</span><br><span class="line">ALTER TABLE stuinfo ADD UNIQUE(seat);</span><br><span class="line">#5.添加外键</span><br><span class="line">ALTER TABLE stuinfo ADD</span><br><span class="line">ALTER TABLE stuinfo ADD CONSTRAINT fk_stuinfo_major FOREIGN KEY(majorId) REFERENCES major(id);</span><br><span class="line"></span><br><span class="line">#ps:要去掉已有的约束，可以修改字段类型时不指定约束。但主键、唯一键、外键约束似乎不能通过这种方式去掉。</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#三、修改表时删除已有约束</span><br><span class="line">#1.删除非空约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR(20) NULL;</span><br><span class="line">#2.删除默认约束</span><br><span class="line">ALTER TABLE stuinfo MODIFY COLUMN age INT;</span><br><span class="line"></span><br><span class="line">#主键、唯一键、外键约束的删除有所不同，需要借助drop</span><br><span class="line">#3.删除主键，因为主键只有一个，所以不用指定字段名</span><br><span class="line">ALTER TABLE stuinfo DROP PRIMARY KEY;#主键约束删除后，非空约束还在</span><br><span class="line">#4.删除唯一约束</span><br><span class="line">ALTER TABLE stuinfo DROP INDEX seat;#删除的时索引名，不是字段名</span><br><span class="line">#5.删除外键约束</span><br><span class="line">ALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;</span><br><span class="line">#ps:删除了外键，但是相应的索引还在。</span><br><span class="line">#外键的删除只能用别名，也就是添加外键时指定的约束别名，但唯一约束就不需要，如果没有指定别名，默认key_name为字段名，这时删除唯一约束可以指定字段名。</span><br></pre></td></tr></table></figure>



<hr>
<h5 id="TCL学习（事务控制语言）"><a href="#TCL学习（事务控制语言）" class="headerlink" title="TCL学习（事务控制语言）"></a>TCL学习（事务控制语言）</h5><p>事务和事务处理</p>
<hr>
<h5 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h5><hr>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客优化——通过gulp压缩静态文件</title>
    <url>/2020/03/14/Hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E9%80%9A%E8%BF%87gulp%E5%8E%8B%E7%BC%A9%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="1-安装gulp依赖"><a href="#1-安装gulp依赖" class="headerlink" title="1.安装gulp依赖"></a>1.安装gulp依赖</h3><p>1.在电脑的Hexo博客目录右键“Git Bash Here”，执行下面的命令安装gulp：</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm insatll gulp</span><br></pre></td></tr></table></figure>

<p>2.再执行下面的命令，安装所需的gulp模块：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install gulp-concat</span><br><span class="line">npm install gulp-htmlclean</span><br><span class="line">npm install gulp-htmlmin&quot;</span><br><span class="line">npm install gulp-imagemin</span><br><span class="line">npm install gulp-minify-css</span><br><span class="line">npm install gulp-uglify</span><br></pre></td></tr></table></figure>

<p>注意：由于同时安装可能安装失败，这里对每个模块分开安装，安装失败时重新执行命令即可。</p>
<hr>
<h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h3><p>在博客根目录新建文件gulp.js，写入以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp &#x3D; require(&#39;gulp&#39;),</span><br><span class="line">    uglify &#x3D; require(&#39;gulp-uglify&#39;),</span><br><span class="line">    cssmin &#x3D; require(&#39;gulp-minify-css&#39;),</span><br><span class="line">    imagemin &#x3D; require(&#39;gulp-imagemin&#39;),</span><br><span class="line">    htmlmin &#x3D; require(&#39;gulp-htmlmin&#39;),</span><br><span class="line">    htmlclean &#x3D; require(&#39;gulp-htmlclean&#39;);</span><br><span class="line">concat &#x3D; require(&#39;gulp-concat&#39;);</span><br><span class="line">&#x2F;&#x2F;JS压缩</span><br><span class="line">gulp.task(&#39;uglify&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;js&#x2F;**&#x2F;.js&#39;, &#39;!.&#x2F;public&#x2F;js&#x2F;**&#x2F;*min.js&#39;]) &#x2F;&#x2F;只是排除min.js文件还是不严谨，一般不会有问题，根据自己博客的修改我的修改为return gulp.src([&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;,&#39;!.&#x2F;public&#x2F;zuoxi&#x2F;**&#x2F;*.js&#39;,,&#39;!.&#x2F;public&#x2F;radio&#x2F;**&#x2F;*.js&#39;])</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;js&#39;)); &#x2F;&#x2F;对应修改为.&#x2F;public即可</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-js压缩</span><br><span class="line">gulp.task(&#39;fancybox:js&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.js&#39;)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 合并 JS</span><br><span class="line">gulp.task(&#39;jsall&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.js&#39;)</span><br><span class="line">        &#x2F;&#x2F; 压缩后重命名</span><br><span class="line">        .pipe(concat(&#39;app.js&#39;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;public-fancybox-css压缩</span><br><span class="line">gulp.task(&#39;fancybox:css&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;jquery.fancybox.css&#39;)</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;vendors&#x2F;fancybox&#x2F;source&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;CSS压缩</span><br><span class="line">gulp.task(&#39;cssmin&#39;, function() &#123;</span><br><span class="line">    return gulp.src([&#39;.&#x2F;public&#x2F;css&#x2F;main.css&#39;, &#39;!.&#x2F;public&#x2F;css&#x2F;*min.css&#39;])</span><br><span class="line">        .pipe(cssmin())</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;css&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F;图片压缩</span><br><span class="line">gulp.task(&#39;images&#39;, function() &#123;</span><br><span class="line">    gulp.src(&#39;.&#x2F;public&#x2F;images&#x2F;*.*&#39;)</span><br><span class="line">        .pipe(imagemin(&#123;</span><br><span class="line">            progressive: false</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#x2F;images&#x2F;&#39;));</span><br><span class="line">&#125;);</span><br><span class="line">&#x2F;&#x2F; 压缩 public 目录 html文件 public&#x2F;**&#x2F;*.hmtl 表示public下所有文件夹中html，包括当前目录</span><br><span class="line">gulp.task(&#39;minify-html&#39;, function() &#123;</span><br><span class="line">    return gulp.src(&#39;.&#x2F;public&#x2F;**&#x2F;*.html&#39;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&#39;.&#x2F;public&#39;))</span><br><span class="line">&#125;);</span><br><span class="line">gulp.task(&#39;build&#39;, [&#39;uglify&#39;, &#39;cssmin&#39;, &#39;fancybox:js&#39;, &#39;fancybox:css&#39;, &#39;jsall&#39;, &#39;images&#39;, &#39;minify-html&#39;]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;, &#39;minify-html&#39;</span><br></pre></td></tr></table></figure>

<p>保存，配置完成，下次生成时，会自动压缩博客静态文件，优化博客访问速度。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>优化</tag>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Github博客搭建流程(win)</title>
    <url>/2020/02/25/Hexo-Github%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B(win)/</url>
    <content><![CDATA[<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1.注册Github账号"></a>1.注册Github账号</h3><h3 id="2-下载nodejs-Git官方安装包"><a href="#2-下载nodejs-Git官方安装包" class="headerlink" title="2.下载nodejs+Git官方安装包"></a>2.下载nodejs+Git官方安装包</h3><h3 id="3-保证网络畅通"><a href="#3-保证网络畅通" class="headerlink" title="3.保证网络畅通"></a>3.保证网络畅通</h3><a id="more"></a>

<hr>
<h2 id="搭建与发布"><a href="#搭建与发布" class="headerlink" title="搭建与发布"></a>搭建与发布</h2><h3 id="1-安装nodejs和Git"><a href="#1-安装nodejs和Git" class="headerlink" title="1.安装nodejs和Git"></a>1.安装nodejs和Git</h3><h3 id="2-以管理员的方式运行CMD进行下面的操作"><a href="#2-以管理员的方式运行CMD进行下面的操作" class="headerlink" title="2.以管理员的方式运行CMD进行下面的操作"></a>2.以管理员的方式运行CMD进行下面的操作</h3><p>1.首先给npm换源</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>2.安装hexo-cli</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p><strong>PS:如果之前已经已经搭建过Hexo博客，到这一步就可以结束了，只需要把原来的blog文件夹复制到新的电脑即可。</strong></p>
<p>3.新建一个blog文件夹，在这个文件夹下选择鼠标右键的Git Bash Here命令，初始化hexo在blog文件夹生成本地博客系统，在git bash下输入命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>注意：这里如果失败，要把blog文件夹清空，再重复初始化操作。</p>
<p>4.安装hexo-deployer-git组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<h3 id="3-在Github账户上新建一个repository，其名称要与Github账户名相同"><a href="#3-在Github账户上新建一个repository，其名称要与Github账户名相同" class="headerlink" title="3.在Github账户上新建一个repository，其名称要与Github账户名相同"></a>3.在Github账户上新建一个repository，其名称要与Github账户名相同</h3><h3 id="4-修改博客系统的配置文件blog-config-yml"><a href="#4-修改博客系统的配置文件blog-config-yml" class="headerlink" title="4.修改博客系统的配置文件blog/_config.yml"></a>4.修改博客系统的配置文件blog/_config.yml</h3><p>找到最后的deploy项，将上一步新建的repository的地址复制过来作为repo项，即改成下面这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;账户名&#x2F;账户名.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>注意：冒号与后面的字符之间要留一个空格。</p>
<p>至此hexo博客基本搭建完成，可以顺利发布博客了。</p>
<h3 id="5-在blog文件夹下用git-bash执行以下命令发布博客"><a href="#5-在blog文件夹下用git-bash执行以下命令发布博客" class="headerlink" title="5.在blog文件夹下用git bash执行以下命令发布博客"></a>5.在blog文件夹下用git bash执行以下命令发布博客</h3><p>1.新建博客文章</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n &quot;文章名&quot;</span><br></pre></td></tr></table></figure>

<p>该命令在blog/source/_posts/下生成”文章名.md“文件，可以用编辑器在里面先写好文章</p>
<p>2.执行清理命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>3.执行生成命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>4.本地预览</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>此后可以在“localhost:4000”访问本地博客。</p>
<p>5.部署到Github</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>此后可以在“账户名.github.io”访问部署到Github的博客。</p>
<hr>
<h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>1.从github下载主题包解压到blog/themes/new-theme里；</p>
<p>2.修改blog/_config.yml文件的theme项，改为新的主题文件夹名new-theme；</p>
<p>3.此时主题更换完成，在下一次部署时就会生效，主题个性化定制可通过修改主题跟目录下的_config.yml文件实现。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
